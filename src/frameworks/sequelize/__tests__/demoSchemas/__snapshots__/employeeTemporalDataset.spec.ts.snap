// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sequelize Framework generates correct code for employeeTemporalDataset 1`] = `
Object {
  "files": Array [
    Object {
      "files": Array [
        Object {
          "content": "import type { Sequelize, Model } from 'sequelize'
import { Employee } from './Employee'
import type { EmployeeAttributes, EmployeeCreationAttributes } from './Employee'
import { Department } from './Department'
import type { DepartmentAttributes, DepartmentCreationAttributes } from './Department'
import { DeptEmp } from './DeptEmp'
import type { DeptEmpAttributes, DeptEmpCreationAttributes } from './DeptEmp'
import { DeptManager } from './DeptManager'
import type { DeptManagerAttributes, DeptManagerCreationAttributes } from './DeptManager'
import { Title } from './Title'
import type { TitleAttributes, TitleCreationAttributes } from './Title'
import { Salary } from './Salary'
import type { SalaryAttributes, SalaryCreationAttributes } from './Salary'

export {
  Employee,
  Department,
  DeptEmp,
  DeptManager,
  Title,
  Salary
}

export type {
  EmployeeAttributes,
  EmployeeCreationAttributes,
  DepartmentAttributes,
  DepartmentCreationAttributes,
  DeptEmpAttributes,
  DeptEmpCreationAttributes,
  DeptManagerAttributes,
  DeptManagerCreationAttributes,
  TitleAttributes,
  TitleCreationAttributes,
  SalaryAttributes,
  SalaryCreationAttributes
}

export function initModels(sequelize: Sequelize) {
  Employee.initModel(sequelize)
  Department.initModel(sequelize)
  DeptEmp.initModel(sequelize)
  DeptManager.initModel(sequelize)
  Title.initModel(sequelize)
  Salary.initModel(sequelize)

  Employee.hasMany(Salary, {
    foreignKey: 'emp_no'
  })
  Employee.hasMany(Title, {
    foreignKey: 'emp_no'
  })
  Employee.belongsToMany(Department, {
    as: 'employingDepartments',
    through: DeptEmp,
    foreignKey: 'emp_no',
    otherKey: 'dept_no',
    onDelete: 'CASCADE'
  })
  Employee.belongsToMany(Department, {
    as: 'managedDepartments',
    through: DeptManager,
    foreignKey: 'emp_no',
    otherKey: 'dept_no',
    onDelete: 'CASCADE'
  })
  Department.belongsToMany(Employee, {
    as: 'employees',
    through: DeptEmp,
    foreignKey: 'departments_id',
    otherKey: 'employee_id',
    onDelete: 'CASCADE'
  })
  Department.belongsToMany(Employee, {
    as: 'managers',
    through: DeptManager,
    foreignKey: 'departments_id',
    otherKey: 'manager_id',
    onDelete: 'CASCADE'
  })
  Department.hasMany(DeptEmp, {
    foreignKey: 'dept_no'
  })
  Department.hasMany(DeptManager, {
    foreignKey: 'dept_no'
  })
  DeptEmp.belongsTo(Employee, {
    foreignKey: 'emp_no'
  })
  DeptEmp.belongsTo(Department, {
    foreignKey: 'dept_no'
  })
  DeptManager.belongsTo(Employee, {
    foreignKey: 'emp_no'
  })
  DeptManager.belongsTo(Department, {
    foreignKey: 'dept_no'
  })
  Title.belongsTo(Employee, {
    foreignKey: 'emp_no'
  })
  Salary.belongsTo(Employee, {
    foreignKey: 'emp_no'
  })

  return {
    Employee,
    Department,
    DeptEmp,
    DeptManager,
    Title,
    Salary
  }
}
",
          "name": "index.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Department, DepartmentId } from './Department'
import type { Salary, SalaryId } from './Salary'
import type { Title, TitleId } from './Title'

export interface EmployeeAttributes {
  empNo: number
  birthDate: string
  firstName: string
  lastName: string
  gender: 'M' | 'F' | 'O'
  hireDate: string
}

export type EmployeePk = 'empNo'
export type EmployeeId = EmployeeAttributes[EmployeePk]
export type EmployeeCreationAttributes = Optional<EmployeeAttributes, EmployeePk>

export class Employee extends Model<EmployeeAttributes, EmployeeCreationAttributes> implements EmployeeAttributes {
  public readonly empNo!: number
  public birthDate!: string
  public firstName!: string
  public lastName!: string
  public gender!: 'M' | 'F' | 'O'
  public hireDate!: string

  // Employee hasMany Salary
  public readonly salaries?: Salary[]
  public getSalaries!: Sequelize.HasManyGetAssociationsMixin<Salary>
  public setSalaries!: Sequelize.HasManySetAssociationsMixin<Salary, SalaryId>
  public addSalary!: Sequelize.HasManyAddAssociationMixin<Salary, SalaryId>
  public addSalaries!: Sequelize.HasManyAddAssociationsMixin<Salary, SalaryId>
  public createSalary!: Sequelize.HasManyCreateAssociationMixin<Salary>
  public removeSalary!: Sequelize.HasManyRemoveAssociationMixin<Salary, SalaryId>
  public removeSalaries!: Sequelize.HasManyRemoveAssociationsMixin<Salary, SalaryId>
  public hasSalary!: Sequelize.HasManyHasAssociationMixin<Salary, SalaryId>
  public hasSalaries!: Sequelize.HasManyHasAssociationsMixin<Salary, SalaryId>
  public countSalaries!: Sequelize.HasManyCountAssociationsMixin
  
  // Employee hasMany Title
  public readonly titles?: Title[]
  public getTitles!: Sequelize.HasManyGetAssociationsMixin<Title>
  public setTitles!: Sequelize.HasManySetAssociationsMixin<Title, TitleId>
  public addTitle!: Sequelize.HasManyAddAssociationMixin<Title, TitleId>
  public addTitles!: Sequelize.HasManyAddAssociationsMixin<Title, TitleId>
  public createTitle!: Sequelize.HasManyCreateAssociationMixin<Title>
  public removeTitle!: Sequelize.HasManyRemoveAssociationMixin<Title, TitleId>
  public removeTitles!: Sequelize.HasManyRemoveAssociationsMixin<Title, TitleId>
  public hasTitle!: Sequelize.HasManyHasAssociationMixin<Title, TitleId>
  public hasTitles!: Sequelize.HasManyHasAssociationsMixin<Title, TitleId>
  public countTitles!: Sequelize.HasManyCountAssociationsMixin
  
  // Employee belongsToMany Department (as EmployingDepartment)
  public readonly employingDepartments?: Department[]
  public getEmployingDepartments!: Sequelize.BelongsToManyGetAssociationsMixin<Department>
  public setEmployingDepartments!: Sequelize.BelongsToManySetAssociationsMixin<Department, DepartmentId>
  public addEmployingDepartment!: Sequelize.BelongsToManyAddAssociationMixin<Department, DepartmentId>
  public addEmployingDepartments!: Sequelize.BelongsToManyAddAssociationsMixin<Department, DepartmentId>
  public createEmployingDepartment!: Sequelize.BelongsToManyCreateAssociationMixin<Department>
  public removeEmployingDepartment!: Sequelize.BelongsToManyRemoveAssociationMixin<Department, DepartmentId>
  public removeEmployingDepartments!: Sequelize.BelongsToManyRemoveAssociationsMixin<Department, DepartmentId>
  public hasEmployingDepartment!: Sequelize.BelongsToManyHasAssociationMixin<Department, DepartmentId>
  public hasEmployingDepartments!: Sequelize.BelongsToManyHasAssociationsMixin<Department, DepartmentId>
  public countEmployingDepartments!: Sequelize.BelongsToManyCountAssociationsMixin
  
  // Employee belongsToMany Department (as ManagedDepartment)
  public readonly managedDepartments?: Department[]
  public getManagedDepartments!: Sequelize.BelongsToManyGetAssociationsMixin<Department>
  public setManagedDepartments!: Sequelize.BelongsToManySetAssociationsMixin<Department, DepartmentId>
  public addManagedDepartment!: Sequelize.BelongsToManyAddAssociationMixin<Department, DepartmentId>
  public addManagedDepartments!: Sequelize.BelongsToManyAddAssociationsMixin<Department, DepartmentId>
  public createManagedDepartment!: Sequelize.BelongsToManyCreateAssociationMixin<Department>
  public removeManagedDepartment!: Sequelize.BelongsToManyRemoveAssociationMixin<Department, DepartmentId>
  public removeManagedDepartments!: Sequelize.BelongsToManyRemoveAssociationsMixin<Department, DepartmentId>
  public hasManagedDepartment!: Sequelize.BelongsToManyHasAssociationMixin<Department, DepartmentId>
  public hasManagedDepartments!: Sequelize.BelongsToManyHasAssociationsMixin<Department, DepartmentId>
  public countManagedDepartments!: Sequelize.BelongsToManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Employee {
    Employee.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      birthDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      },
      firstName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      lastName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      gender: {
        type: DataTypes.ENUM('M', 'F', 'O'),
        allowNull: false
      },
      hireDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Employee
  }
}
",
          "name": "Employee.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { DeptEmp, DeptEmpId } from './DeptEmp'
import type { DeptManager, DeptManagerId } from './DeptManager'
import type { Employee, EmployeeId } from './Employee'

export interface DepartmentAttributes {
  deptNo: string
  deptName: string
}

export type DepartmentPk = 'deptNo'
export type DepartmentId = DepartmentAttributes[DepartmentPk]
export type DepartmentCreationAttributes = Optional<DepartmentAttributes, DepartmentPk>

export class Department extends Model<DepartmentAttributes, DepartmentCreationAttributes> implements DepartmentAttributes {
  public readonly deptNo!: string
  public deptName!: string

  // Department belongsToMany Employee (as Employee)
  public readonly employees?: Employee[]
  public getEmployees!: Sequelize.BelongsToManyGetAssociationsMixin<Employee>
  public setEmployees!: Sequelize.BelongsToManySetAssociationsMixin<Employee, EmployeeId>
  public addEmployee!: Sequelize.BelongsToManyAddAssociationMixin<Employee, EmployeeId>
  public addEmployees!: Sequelize.BelongsToManyAddAssociationsMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToManyCreateAssociationMixin<Employee>
  public removeEmployee!: Sequelize.BelongsToManyRemoveAssociationMixin<Employee, EmployeeId>
  public removeEmployees!: Sequelize.BelongsToManyRemoveAssociationsMixin<Employee, EmployeeId>
  public hasEmployee!: Sequelize.BelongsToManyHasAssociationMixin<Employee, EmployeeId>
  public hasEmployees!: Sequelize.BelongsToManyHasAssociationsMixin<Employee, EmployeeId>
  public countEmployees!: Sequelize.BelongsToManyCountAssociationsMixin
  
  // Department belongsToMany Employee (as Manager)
  public readonly managers?: Employee[]
  public getManagers!: Sequelize.BelongsToManyGetAssociationsMixin<Employee>
  public setManagers!: Sequelize.BelongsToManySetAssociationsMixin<Employee, EmployeeId>
  public addManager!: Sequelize.BelongsToManyAddAssociationMixin<Employee, EmployeeId>
  public addManagers!: Sequelize.BelongsToManyAddAssociationsMixin<Employee, EmployeeId>
  public createManager!: Sequelize.BelongsToManyCreateAssociationMixin<Employee>
  public removeManager!: Sequelize.BelongsToManyRemoveAssociationMixin<Employee, EmployeeId>
  public removeManagers!: Sequelize.BelongsToManyRemoveAssociationsMixin<Employee, EmployeeId>
  public hasManager!: Sequelize.BelongsToManyHasAssociationMixin<Employee, EmployeeId>
  public hasManagers!: Sequelize.BelongsToManyHasAssociationsMixin<Employee, EmployeeId>
  public countManagers!: Sequelize.BelongsToManyCountAssociationsMixin
  
  // Department hasMany DeptEmp
  public readonly deptEmps?: DeptEmp[]
  public getDeptEmps!: Sequelize.HasManyGetAssociationsMixin<DeptEmp>
  public setDeptEmps!: Sequelize.HasManySetAssociationsMixin<DeptEmp, DeptEmpId>
  public addDeptEmp!: Sequelize.HasManyAddAssociationMixin<DeptEmp, DeptEmpId>
  public addDeptEmps!: Sequelize.HasManyAddAssociationsMixin<DeptEmp, DeptEmpId>
  public createDeptEmp!: Sequelize.HasManyCreateAssociationMixin<DeptEmp>
  public removeDeptEmp!: Sequelize.HasManyRemoveAssociationMixin<DeptEmp, DeptEmpId>
  public removeDeptEmps!: Sequelize.HasManyRemoveAssociationsMixin<DeptEmp, DeptEmpId>
  public hasDeptEmp!: Sequelize.HasManyHasAssociationMixin<DeptEmp, DeptEmpId>
  public hasDeptEmps!: Sequelize.HasManyHasAssociationsMixin<DeptEmp, DeptEmpId>
  public countDeptEmps!: Sequelize.HasManyCountAssociationsMixin
  
  // Department hasMany DeptManager
  public readonly deptManagers?: DeptManager[]
  public getDeptManagers!: Sequelize.HasManyGetAssociationsMixin<DeptManager>
  public setDeptManagers!: Sequelize.HasManySetAssociationsMixin<DeptManager, DeptManagerId>
  public addDeptManager!: Sequelize.HasManyAddAssociationMixin<DeptManager, DeptManagerId>
  public addDeptManagers!: Sequelize.HasManyAddAssociationsMixin<DeptManager, DeptManagerId>
  public createDeptManager!: Sequelize.HasManyCreateAssociationMixin<DeptManager>
  public removeDeptManager!: Sequelize.HasManyRemoveAssociationMixin<DeptManager, DeptManagerId>
  public removeDeptManagers!: Sequelize.HasManyRemoveAssociationsMixin<DeptManager, DeptManagerId>
  public hasDeptManager!: Sequelize.HasManyHasAssociationMixin<DeptManager, DeptManagerId>
  public hasDeptManagers!: Sequelize.HasManyHasAssociationsMixin<DeptManager, DeptManagerId>
  public countDeptManagers!: Sequelize.HasManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Department {
    Department.init({
      deptNo: {
        type: DataTypes.STRING,
        primaryKey: true,
        allowNull: false
      },
      deptName: {
        type: DataTypes.STRING,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Department
  }
}
",
          "name": "Department.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Department, DepartmentId } from './Department'
import type { Employee, EmployeeId } from './Employee'

export interface DeptEmpAttributes {
  empNo: number
  deptNo: string
  fromDate: string
  toDate: string
}

export type DeptEmpPk = 'empNo' | 'deptNo'
export type DeptEmpId = DeptEmpAttributes[DeptEmpPk]
export type DeptEmpCreationAttributes = Optional<DeptEmpAttributes, DeptEmpPk>

export class DeptEmp extends Model<DeptEmpAttributes, DeptEmpCreationAttributes> implements DeptEmpAttributes {
  public readonly empNo!: number
  public readonly deptNo!: string
  public fromDate!: string
  public toDate!: string

  // DeptEmp belongsTo Employee
  public readonly employee?: Employee
  public getEmployee!: Sequelize.BelongsToGetAssociationMixin<Employee>
  public setEmployee!: Sequelize.BelongsToSetAssociationMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToCreateAssociationMixin<Employee>
  
  // DeptEmp belongsTo Department
  public readonly department?: Department
  public getDepartment!: Sequelize.BelongsToGetAssociationMixin<Department>
  public setDepartment!: Sequelize.BelongsToSetAssociationMixin<Department, DepartmentId>
  public createDepartment!: Sequelize.BelongsToCreateAssociationMixin<Department>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof DeptEmp {
    DeptEmp.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        allowNull: false
      },
      deptNo: {
        type: DataTypes.STRING,
        primaryKey: true,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return DeptEmp
  }
}
",
          "name": "DeptEmp.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Department, DepartmentId } from './Department'
import type { Employee, EmployeeId } from './Employee'

export interface DeptManagerAttributes {
  empNo: number
  deptNo: string
  fromDate: string
  toDate: string
}

export type DeptManagerPk = 'empNo' | 'deptNo'
export type DeptManagerId = DeptManagerAttributes[DeptManagerPk]
export type DeptManagerCreationAttributes = Optional<DeptManagerAttributes, DeptManagerPk>

export class DeptManager extends Model<DeptManagerAttributes, DeptManagerCreationAttributes> implements DeptManagerAttributes {
  public readonly empNo!: number
  public readonly deptNo!: string
  public fromDate!: string
  public toDate!: string

  // DeptManager belongsTo Employee
  public readonly employee?: Employee
  public getEmployee!: Sequelize.BelongsToGetAssociationMixin<Employee>
  public setEmployee!: Sequelize.BelongsToSetAssociationMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToCreateAssociationMixin<Employee>
  
  // DeptManager belongsTo Department
  public readonly department?: Department
  public getDepartment!: Sequelize.BelongsToGetAssociationMixin<Department>
  public setDepartment!: Sequelize.BelongsToSetAssociationMixin<Department, DepartmentId>
  public createDepartment!: Sequelize.BelongsToCreateAssociationMixin<Department>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof DeptManager {
    DeptManager.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        allowNull: false
      },
      deptNo: {
        type: DataTypes.STRING,
        primaryKey: true,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return DeptManager
  }
}
",
          "name": "DeptManager.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Employee, EmployeeId } from './Employee'

export interface TitleAttributes {
  empNo: number
  title: string
  fromDate: string
  toDate?: string
}

export type TitlePk = 'empNo' | 'fromDate'
export type TitleId = TitleAttributes[TitlePk]
export type TitleCreationAttributes = Optional<TitleAttributes, TitlePk>

export class Title extends Model<TitleAttributes, TitleCreationAttributes> implements TitleAttributes {
  public readonly empNo!: number
  public title!: string
  public readonly fromDate!: string
  public toDate?: string

  // Title belongsTo Employee
  public readonly employee?: Employee
  public getEmployee!: Sequelize.BelongsToGetAssociationMixin<Employee>
  public setEmployee!: Sequelize.BelongsToSetAssociationMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToCreateAssociationMixin<Employee>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Title {
    Title.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      title: {
        type: DataTypes.STRING,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        primaryKey: true,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY
      }
    }, {
      sequelize
    })
    
    return Title
  }
}
",
          "name": "Title.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Employee, EmployeeId } from './Employee'

export interface SalaryAttributes {
  empNo: number
  salary: number
  fromDate: string
  toDate?: string
}

export type SalaryPk = 'empNo' | 'fromDate'
export type SalaryId = SalaryAttributes[SalaryPk]
export type SalaryCreationAttributes = Optional<SalaryAttributes, SalaryPk>

export class Salary extends Model<SalaryAttributes, SalaryCreationAttributes> implements SalaryAttributes {
  public readonly empNo!: number
  public salary!: number
  public readonly fromDate!: string
  public toDate?: string

  // Salary belongsTo Employee
  public readonly employee?: Employee
  public getEmployee!: Sequelize.BelongsToGetAssociationMixin<Employee>
  public setEmployee!: Sequelize.BelongsToSetAssociationMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToCreateAssociationMixin<Employee>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Salary {
    Salary.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      salary: {
        type: DataTypes.INTEGER,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        primaryKey: true,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY
      }
    }, {
      sequelize
    })
    
    return Salary
  }
}
",
          "name": "Salary.ts",
          "type": "FILE",
        },
      ],
      "name": "models",
      "type": "DIRECTORY",
    },
    Object {
      "content": "node_modules/
dist
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.tmp
",
      "name": ".gitignore",
      "type": "FILE",
    },
    Object {
      "content": "import { Sequelize } from 'sequelize'

const db: Sequelize = new Sequelize({
  dialect: 'postgres',
  database: process.env.POSTGRES_DB_NAME || 'employee_temporal_dataset',
  username: process.env.POSTGRES_DB_USERNAME || 'postgres',
  password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
  host: process.env.POSTGRES_DB_HOST || 'localhost',
  port: parseInt(process.env.POSTGRES_DB_PORT || '5432'),
  define: {
    underscored: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at'
  }
})

export default db
",
      "name": "db.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
  \\"name\\": \\"employee-temporal-dataset\\",
  \\"version\\": \\"0.0.1\\",
  \\"description\\": \\"\\",
  \\"main\\": \\"server.ts\\",
  \\"scripts\\": {
    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\",
    \\"build\\": \\"tsc\\",
    \\"start\\": \\"node ./dist/server.js\\"
  },
  \\"author\\": \\"\\",
  \\"license\\": \\"ISC\\",
  \\"dependencies\\": {
    \\"pg\\": \\"^8.5.1\\",
    \\"pg-hstore\\": \\"^2.3.3\\",
    \\"sequelize\\": \\"^6.3.5\\"
  },
  \\"devDependencies\\": {
    \\"@types/node\\": \\"^14.14.20\\",
    \\"@types/validator\\": \\"^13.1.3\\",
    \\"typescript\\": \\"^4.1.3\\"
  }
}

",
      "name": "package.json",
      "type": "FILE",
    },
    Object {
      "content": "import db from './db'
import { initModels } from './models'

initModels(db)

db.sync({ force: true })
",
      "name": "server.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
    \\"compilerOptions\\": {
      \\"target\\": \\"ES2020\\",
      \\"module\\": \\"commonjs\\",
      \\"lib\\": [\\"ES2020\\"],
      \\"outDir\\": \\"dist\\",
      \\"strict\\": true,
      \\"moduleResolution\\": \\"node\\",
      \\"esModuleInterop\\": true,
      \\"forceConsistentCasingInFileNames\\": true
    }
  }
",
      "name": "tsconfig.json",
      "type": "FILE",
    },
  ],
  "name": "employee-temporal-dataset",
  "type": "DIRECTORY",
}
`;
