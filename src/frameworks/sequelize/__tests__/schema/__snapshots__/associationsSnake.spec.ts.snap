// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sequelize Framework schema - associations snake generates correct code 1`] = `
Object {
  "files": Array [
    Object {
      "files": Array [
        Object {
          "content": "module.exports = {
  development: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME || 'associations',
    username: process.env.POSTGRES_DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
    host: process.env.POSTGRES_DB_HOST || 'localhost',
    port: parseInt(process.env.POSTGRES_DB_PORT || '5432')
  },
  test: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME || 'associations',
    username: process.env.POSTGRES_DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
    host: process.env.POSTGRES_DB_HOST || 'localhost',
    port: parseInt(process.env.POSTGRES_DB_PORT || '5432')
  },
  production: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME,
    username: process.env.POSTGRES_DB_USERNAME,
    password: process.env.POSTGRES_DB_PASSWORD,
    host: process.env.POSTGRES_DB_HOST,
    port: parseInt(process.env.POSTGRES_DB_PORT)
  }
}",
          "name": "config.js",
          "type": "FILE",
        },
      ],
      "name": "config",
      "type": "DIRECTORY",
    },
    Object {
      "files": Array [
        Object {
          "content": "import type { Sequelize, Model } from 'sequelize'
import { Category } from './Category'
import type { CategoryAttributes, CategoryCreationAttributes } from './Category'
import { Post } from './Post'
import type { PostAttributes, PostCreationAttributes } from './Post'
import { PostCategory } from './PostCategory'
import type { PostCategoryAttributes, PostCategoryCreationAttributes } from './PostCategory'
import { PostTag } from './PostTag'
import type { PostTagAttributes, PostTagCreationAttributes } from './PostTag'
import { Tag } from './Tag'
import type { TagAttributes, TagCreationAttributes } from './Tag'

export {
  Category,
  Post,
  PostCategory,
  PostTag,
  Tag
}

export type {
  CategoryAttributes,
  CategoryCreationAttributes,
  PostAttributes,
  PostCreationAttributes,
  PostCategoryAttributes,
  PostCategoryCreationAttributes,
  PostTagAttributes,
  PostTagCreationAttributes,
  TagAttributes,
  TagCreationAttributes
}

export function initModels(sequelize: Sequelize) {
  Category.initModel(sequelize)
  Post.initModel(sequelize)
  PostCategory.initModel(sequelize)
  PostTag.initModel(sequelize)
  Tag.initModel(sequelize)

  Category.belongsTo(Category, {
    as: 'parent',
    foreignKey: 'parent_id'
  })
  Category.hasMany(Category, {
    as: 'children',
    foreignKey: 'category_id'
  })
  Category.hasMany(PostCategory, {
    foreignKey: 'category_id'
  })
  Category.belongsToMany(Post, {
    through: PostCategory,
    foreignKey: 'category_id',
    otherKey: 'post_id',
    onDelete: 'CASCADE'
  })
  Post.belongsTo(Post, {
    as: 'parent',
    foreignKey: 'parent_id'
  })
  Post.hasMany(Post, {
    as: 'children',
    foreignKey: 'post_id'
  })
  Post.hasMany(PostCategory, {
    foreignKey: 'post_id'
  })
  Post.belongsToMany(Category, {
    through: PostCategory,
    foreignKey: 'post_id',
    otherKey: 'category_id',
    onDelete: 'CASCADE'
  })
  Post.hasMany(PostTag, {
    foreignKey: 'post_id'
  })
  Post.belongsToMany(Tag, {
    through: 'post_tag',
    foreignKey: 'post_id',
    otherKey: 'tag_id',
    onDelete: 'CASCADE'
  })
  PostCategory.belongsTo(Post, {
    foreignKey: 'post_id'
  })
  PostCategory.belongsTo(Category, {
    foreignKey: 'category_id'
  })
  PostTag.belongsTo(Post, {
    foreignKey: 'post_id'
  })
  PostTag.belongsTo(Tag, {
    foreignKey: 'tag_id'
  })
  Tag.hasMany(PostTag, {
    foreignKey: 'tag_id'
  })
  Tag.belongsToMany(Post, {
    through: PostTag,
    foreignKey: 'tag_id',
    otherKey: 'post_id',
    onDelete: 'CASCADE'
  })

  return {
    Category,
    Post,
    PostCategory,
    PostTag,
    Tag
  }
}
",
          "name": "index.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { Association, DataTypes, Model, Optional } from 'sequelize'
import type { Post, PostId } from './Post'
import type { PostCategory, PostCategoryId } from './PostCategory'

export interface CategoryAttributes {
  
}

export type CategoryId = number
export type CategoryCreationAttributes = CategoryAttributes & { id?: number }

export class Category extends Model<CategoryAttributes, CategoryCreationAttributes> implements CategoryAttributes {
  public readonly id?: number

  // Category belongsTo Category (as Parent)
  public readonly parent?: Category
  public getParent!: Sequelize.BelongsToGetAssociationMixin<Category>
  public setParent!: Sequelize.BelongsToSetAssociationMixin<Category, CategoryId>
  public createParent!: Sequelize.BelongsToCreateAssociationMixin<Category>
  
  // Category hasMany Category (as Children)
  public readonly children?: Category[]
  public getChildren!: Sequelize.HasManyGetAssociationsMixin<Category>
  public setChildren!: Sequelize.HasManySetAssociationsMixin<Category, CategoryId>
  public addChild!: Sequelize.HasManyAddAssociationMixin<Category, CategoryId>
  public addChildren!: Sequelize.HasManyAddAssociationsMixin<Category, CategoryId>
  public createChild!: Sequelize.HasManyCreateAssociationMixin<Category>
  public removeChild!: Sequelize.HasManyRemoveAssociationMixin<Category, CategoryId>
  public removeChildren!: Sequelize.HasManyRemoveAssociationsMixin<Category, CategoryId>
  public hasChild!: Sequelize.HasManyHasAssociationMixin<Category, CategoryId>
  public hasChildren!: Sequelize.HasManyHasAssociationsMixin<Category, CategoryId>
  public countChildren!: Sequelize.HasManyCountAssociationsMixin
  
  // Category hasMany PostCategory
  public readonly PostCategories?: PostCategory[]
  public getPostCategories!: Sequelize.HasManyGetAssociationsMixin<PostCategory>
  public setPostCategories!: Sequelize.HasManySetAssociationsMixin<PostCategory, PostCategoryId>
  public addPostCategory!: Sequelize.HasManyAddAssociationMixin<PostCategory, PostCategoryId>
  public addPostCategories!: Sequelize.HasManyAddAssociationsMixin<PostCategory, PostCategoryId>
  public createPostCategory!: Sequelize.HasManyCreateAssociationMixin<PostCategory>
  public removePostCategory!: Sequelize.HasManyRemoveAssociationMixin<PostCategory, PostCategoryId>
  public removePostCategories!: Sequelize.HasManyRemoveAssociationsMixin<PostCategory, PostCategoryId>
  public hasPostCategory!: Sequelize.HasManyHasAssociationMixin<PostCategory, PostCategoryId>
  public hasPostCategories!: Sequelize.HasManyHasAssociationsMixin<PostCategory, PostCategoryId>
  public countPostCategories!: Sequelize.HasManyCountAssociationsMixin
  
  // Category belongsToMany Post
  public readonly Posts?: Post[]
  public getPosts!: Sequelize.BelongsToManyGetAssociationsMixin<Post>
  public setPosts!: Sequelize.BelongsToManySetAssociationsMixin<Post, PostId>
  public addPost!: Sequelize.BelongsToManyAddAssociationMixin<Post, PostId>
  public addPosts!: Sequelize.BelongsToManyAddAssociationsMixin<Post, PostId>
  public createPost!: Sequelize.BelongsToManyCreateAssociationMixin<Post>
  public removePost!: Sequelize.BelongsToManyRemoveAssociationMixin<Post, PostId>
  public removePosts!: Sequelize.BelongsToManyRemoveAssociationsMixin<Post, PostId>
  public hasPost!: Sequelize.BelongsToManyHasAssociationMixin<Post, PostId>
  public hasPosts!: Sequelize.BelongsToManyHasAssociationsMixin<Post, PostId>
  public countPosts!: Sequelize.BelongsToManyCountAssociationsMixin
  
  public static associations: {
    parent: Association<Category, Category>,
    children: Association<Category, Category>,
    PostCategories: Association<Category, PostCategory>,
    Posts: Association<Category, Post>
  }

  static initModel(sequelize: Sequelize.Sequelize): typeof Category {
    Category.init({
      
    }, {
      sequelize
    })
    
    return Category
  }
}
",
          "name": "Category.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { Association, DataTypes, Model, Optional } from 'sequelize'
import type { Category, CategoryId } from './Category'
import type { PostCategory, PostCategoryId } from './PostCategory'
import type { PostTag, PostTagId } from './PostTag'
import type { Tag, TagId } from './Tag'

export interface PostAttributes {
  
}

export type PostId = number
export type PostCreationAttributes = PostAttributes & { id?: number }

export class Post extends Model<PostAttributes, PostCreationAttributes> implements PostAttributes {
  public readonly id?: number

  // Post belongsTo Post (as Parent)
  public readonly parent?: Post
  public getParent!: Sequelize.BelongsToGetAssociationMixin<Post>
  public setParent!: Sequelize.BelongsToSetAssociationMixin<Post, PostId>
  public createParent!: Sequelize.BelongsToCreateAssociationMixin<Post>
  
  // Post hasMany Post (as Children)
  public readonly children?: Post[]
  public getChildren!: Sequelize.HasManyGetAssociationsMixin<Post>
  public setChildren!: Sequelize.HasManySetAssociationsMixin<Post, PostId>
  public addChild!: Sequelize.HasManyAddAssociationMixin<Post, PostId>
  public addChildren!: Sequelize.HasManyAddAssociationsMixin<Post, PostId>
  public createChild!: Sequelize.HasManyCreateAssociationMixin<Post>
  public removeChild!: Sequelize.HasManyRemoveAssociationMixin<Post, PostId>
  public removeChildren!: Sequelize.HasManyRemoveAssociationsMixin<Post, PostId>
  public hasChild!: Sequelize.HasManyHasAssociationMixin<Post, PostId>
  public hasChildren!: Sequelize.HasManyHasAssociationsMixin<Post, PostId>
  public countChildren!: Sequelize.HasManyCountAssociationsMixin
  
  // Post hasMany PostCategory
  public readonly PostCategories?: PostCategory[]
  public getPostCategories!: Sequelize.HasManyGetAssociationsMixin<PostCategory>
  public setPostCategories!: Sequelize.HasManySetAssociationsMixin<PostCategory, PostCategoryId>
  public addPostCategory!: Sequelize.HasManyAddAssociationMixin<PostCategory, PostCategoryId>
  public addPostCategories!: Sequelize.HasManyAddAssociationsMixin<PostCategory, PostCategoryId>
  public createPostCategory!: Sequelize.HasManyCreateAssociationMixin<PostCategory>
  public removePostCategory!: Sequelize.HasManyRemoveAssociationMixin<PostCategory, PostCategoryId>
  public removePostCategories!: Sequelize.HasManyRemoveAssociationsMixin<PostCategory, PostCategoryId>
  public hasPostCategory!: Sequelize.HasManyHasAssociationMixin<PostCategory, PostCategoryId>
  public hasPostCategories!: Sequelize.HasManyHasAssociationsMixin<PostCategory, PostCategoryId>
  public countPostCategories!: Sequelize.HasManyCountAssociationsMixin
  
  // Post belongsToMany Category
  public readonly Categories?: Category[]
  public getCategories!: Sequelize.BelongsToManyGetAssociationsMixin<Category>
  public setCategories!: Sequelize.BelongsToManySetAssociationsMixin<Category, CategoryId>
  public addCategory!: Sequelize.BelongsToManyAddAssociationMixin<Category, CategoryId>
  public addCategories!: Sequelize.BelongsToManyAddAssociationsMixin<Category, CategoryId>
  public createCategory!: Sequelize.BelongsToManyCreateAssociationMixin<Category>
  public removeCategory!: Sequelize.BelongsToManyRemoveAssociationMixin<Category, CategoryId>
  public removeCategories!: Sequelize.BelongsToManyRemoveAssociationsMixin<Category, CategoryId>
  public hasCategory!: Sequelize.BelongsToManyHasAssociationMixin<Category, CategoryId>
  public hasCategories!: Sequelize.BelongsToManyHasAssociationsMixin<Category, CategoryId>
  public countCategories!: Sequelize.BelongsToManyCountAssociationsMixin
  
  // Post hasMany PostTag
  public readonly PostTags?: PostTag[]
  public getPostTags!: Sequelize.HasManyGetAssociationsMixin<PostTag>
  public setPostTags!: Sequelize.HasManySetAssociationsMixin<PostTag, PostTagId>
  public addPostTag!: Sequelize.HasManyAddAssociationMixin<PostTag, PostTagId>
  public addPostTags!: Sequelize.HasManyAddAssociationsMixin<PostTag, PostTagId>
  public createPostTag!: Sequelize.HasManyCreateAssociationMixin<PostTag>
  public removePostTag!: Sequelize.HasManyRemoveAssociationMixin<PostTag, PostTagId>
  public removePostTags!: Sequelize.HasManyRemoveAssociationsMixin<PostTag, PostTagId>
  public hasPostTag!: Sequelize.HasManyHasAssociationMixin<PostTag, PostTagId>
  public hasPostTags!: Sequelize.HasManyHasAssociationsMixin<PostTag, PostTagId>
  public countPostTags!: Sequelize.HasManyCountAssociationsMixin
  
  // Post belongsToMany Tag
  public readonly Tags?: Tag[]
  public getTags!: Sequelize.BelongsToManyGetAssociationsMixin<Tag>
  public setTags!: Sequelize.BelongsToManySetAssociationsMixin<Tag, TagId>
  public addTag!: Sequelize.BelongsToManyAddAssociationMixin<Tag, TagId>
  public addTags!: Sequelize.BelongsToManyAddAssociationsMixin<Tag, TagId>
  public createTag!: Sequelize.BelongsToManyCreateAssociationMixin<Tag>
  public removeTag!: Sequelize.BelongsToManyRemoveAssociationMixin<Tag, TagId>
  public removeTags!: Sequelize.BelongsToManyRemoveAssociationsMixin<Tag, TagId>
  public hasTag!: Sequelize.BelongsToManyHasAssociationMixin<Tag, TagId>
  public hasTags!: Sequelize.BelongsToManyHasAssociationsMixin<Tag, TagId>
  public countTags!: Sequelize.BelongsToManyCountAssociationsMixin
  
  public static associations: {
    parent: Association<Post, Post>,
    children: Association<Post, Post>,
    PostCategories: Association<Post, PostCategory>,
    Categories: Association<Post, Category>,
    PostTags: Association<Post, PostTag>,
    Tags: Association<Post, Tag>
  }

  static initModel(sequelize: Sequelize.Sequelize): typeof Post {
    Post.init({
      
    }, {
      sequelize
    })
    
    return Post
  }
}
",
          "name": "Post.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { Association, DataTypes, Model, Optional } from 'sequelize'
import type { Category, CategoryId } from './Category'
import type { Post, PostId } from './Post'

export interface PostCategoryAttributes {
  postId?: number
  categoryId?: number
}

export type PostCategoryPk = 'postId' | 'categoryId'
export type PostCategoryId = PostCategoryAttributes[PostCategoryPk]
export type PostCategoryCreationAttributes = Optional<PostCategoryAttributes, PostCategoryPk>

export class PostCategory extends Model<PostCategoryAttributes, PostCategoryCreationAttributes> implements PostCategoryAttributes {
  public readonly postId?: number
  public readonly categoryId?: number

  // PostCategory belongsTo Post
  public readonly Post?: Post
  public getPost!: Sequelize.BelongsToGetAssociationMixin<Post>
  public setPost!: Sequelize.BelongsToSetAssociationMixin<Post, PostId>
  public createPost!: Sequelize.BelongsToCreateAssociationMixin<Post>
  
  // PostCategory belongsTo Category
  public readonly Category?: Category
  public getCategory!: Sequelize.BelongsToGetAssociationMixin<Category>
  public setCategory!: Sequelize.BelongsToSetAssociationMixin<Category, CategoryId>
  public createCategory!: Sequelize.BelongsToCreateAssociationMixin<Category>
  
  public static associations: {
    Post: Association<PostCategory, Post>,
    Category: Association<PostCategory, Category>
  }

  static initModel(sequelize: Sequelize.Sequelize): typeof PostCategory {
    PostCategory.init({
      postId: {
        type: DataTypes.BIGINT,
        primaryKey: true
      },
      categoryId: {
        type: DataTypes.BIGINT,
        primaryKey: true
      }
    }, {
      sequelize
    })
    
    return PostCategory
  }
}
",
          "name": "PostCategory.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { Association, DataTypes, Model, Optional } from 'sequelize'
import type { Post, PostId } from './Post'
import type { Tag, TagId } from './Tag'

export interface PostTagAttributes {
  
}

export type PostTagId = number
export type PostTagCreationAttributes = PostTagAttributes & { id?: number }

export class PostTag extends Model<PostTagAttributes, PostTagCreationAttributes> implements PostTagAttributes {
  public readonly id?: number

  // PostTag belongsTo Post
  public readonly Post?: Post
  public getPost!: Sequelize.BelongsToGetAssociationMixin<Post>
  public setPost!: Sequelize.BelongsToSetAssociationMixin<Post, PostId>
  public createPost!: Sequelize.BelongsToCreateAssociationMixin<Post>
  
  // PostTag belongsTo Tag
  public readonly Tag?: Tag
  public getTag!: Sequelize.BelongsToGetAssociationMixin<Tag>
  public setTag!: Sequelize.BelongsToSetAssociationMixin<Tag, TagId>
  public createTag!: Sequelize.BelongsToCreateAssociationMixin<Tag>
  
  public static associations: {
    Post: Association<PostTag, Post>,
    Tag: Association<PostTag, Tag>
  }

  static initModel(sequelize: Sequelize.Sequelize): typeof PostTag {
    PostTag.init({
      
    }, {
      sequelize
    })
    
    return PostTag
  }
}
",
          "name": "PostTag.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { Association, DataTypes, Model, Optional } from 'sequelize'
import type { Post, PostId } from './Post'
import type { PostTag, PostTagId } from './PostTag'

export interface TagAttributes {
  
}

export type TagId = number
export type TagCreationAttributes = TagAttributes & { id?: number }

export class Tag extends Model<TagAttributes, TagCreationAttributes> implements TagAttributes {
  public readonly id?: number

  // Tag hasMany PostTag
  public readonly PostTags?: PostTag[]
  public getPostTags!: Sequelize.HasManyGetAssociationsMixin<PostTag>
  public setPostTags!: Sequelize.HasManySetAssociationsMixin<PostTag, PostTagId>
  public addPostTag!: Sequelize.HasManyAddAssociationMixin<PostTag, PostTagId>
  public addPostTags!: Sequelize.HasManyAddAssociationsMixin<PostTag, PostTagId>
  public createPostTag!: Sequelize.HasManyCreateAssociationMixin<PostTag>
  public removePostTag!: Sequelize.HasManyRemoveAssociationMixin<PostTag, PostTagId>
  public removePostTags!: Sequelize.HasManyRemoveAssociationsMixin<PostTag, PostTagId>
  public hasPostTag!: Sequelize.HasManyHasAssociationMixin<PostTag, PostTagId>
  public hasPostTags!: Sequelize.HasManyHasAssociationsMixin<PostTag, PostTagId>
  public countPostTags!: Sequelize.HasManyCountAssociationsMixin
  
  // Tag belongsToMany Post
  public readonly Posts?: Post[]
  public getPosts!: Sequelize.BelongsToManyGetAssociationsMixin<Post>
  public setPosts!: Sequelize.BelongsToManySetAssociationsMixin<Post, PostId>
  public addPost!: Sequelize.BelongsToManyAddAssociationMixin<Post, PostId>
  public addPosts!: Sequelize.BelongsToManyAddAssociationsMixin<Post, PostId>
  public createPost!: Sequelize.BelongsToManyCreateAssociationMixin<Post>
  public removePost!: Sequelize.BelongsToManyRemoveAssociationMixin<Post, PostId>
  public removePosts!: Sequelize.BelongsToManyRemoveAssociationsMixin<Post, PostId>
  public hasPost!: Sequelize.BelongsToManyHasAssociationMixin<Post, PostId>
  public hasPosts!: Sequelize.BelongsToManyHasAssociationsMixin<Post, PostId>
  public countPosts!: Sequelize.BelongsToManyCountAssociationsMixin
  
  public static associations: {
    PostTags: Association<Tag, PostTag>,
    Posts: Association<Tag, Post>
  }

  static initModel(sequelize: Sequelize.Sequelize): typeof Tag {
    Tag.init({
      
    }, {
      sequelize
    })
    
    return Tag
  }
}
",
          "name": "Tag.ts",
          "type": "FILE",
        },
      ],
      "name": "models",
      "type": "DIRECTORY",
    },
    Object {
      "content": "node_modules/
dist
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.tmp
",
      "name": ".gitignore",
      "type": "FILE",
    },
    Object {
      "content": "import { Sequelize, Options } from 'sequelize'
import configs from './config/config.js'

const env = process.env.NODE_ENV || 'development'
const config = (configs as {[key: string]: Options})[env]

const db: Sequelize = new Sequelize({
  ...config,
  define: {
    underscored: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at'
  }
})

export default db
",
      "name": "db.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
  \\"name\\": \\"associations\\",
  \\"version\\": \\"0.0.1\\",
  \\"description\\": \\"\\",
  \\"main\\": \\"server.ts\\",
  \\"scripts\\": {
    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\",
    \\"db:create\\": \\"sequelize db:create\\",
    \\"db:drop\\": \\"sequelize db:drop\\",
    \\"build\\": \\"tsc\\",
    \\"start\\": \\"node ./dist/server.js\\",
    \\"dev\\": \\"tsc-watch --onSuccess \\\\\\"node ./dist/server.js\\\\\\"\\"
  },
  \\"author\\": \\"\\",
  \\"license\\": \\"ISC\\",
  \\"dependencies\\": {
    \\"pg\\": \\"^8.5.1\\",
    \\"pg-hstore\\": \\"^2.3.3\\",
    \\"sequelize\\": \\"^6.3.5\\"
  },
  \\"devDependencies\\": {
    \\"@types/node\\": \\"^14.14.20\\",
    \\"@types/validator\\": \\"^13.1.3\\",
    \\"sequelize-cli\\": \\"^6.2.0\\",
    \\"tsc-watch\\": \\"^4.2.9\\",
    \\"typescript\\": \\"^4.1.3\\"
  }
}

",
      "name": "package.json",
      "type": "FILE",
    },
    Object {
      "content": "import http from 'http'
import db from './db'
import { initModels } from './models'

async function run() {
  initModels(db)
  await db.sync()
  const hostname = process.env.HOSTNAME || '127.0.0.1'
  const port = parseInt(process.env.PORT || '3000')
  const server = http.createServer((req, res) => {
    res.statusCode = 200
    res.setHeader('Content-Type', 'text/plain')
    res.end('Hello World')
  })
  
  server.listen(port, hostname, () => {
    console.log(\`Server running at http://\${hostname}:\${port}/\`)
  })
}

run()",
      "name": "server.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
    \\"compilerOptions\\": {
      \\"target\\": \\"ES2020\\",
      \\"module\\": \\"commonjs\\",
      \\"lib\\": [\\"ES2020\\"],
      \\"outDir\\": \\"dist\\",
      \\"strict\\": true,
      \\"moduleResolution\\": \\"node\\",
      \\"esModuleInterop\\": true,
      \\"allowJs\\": true,
      \\"forceConsistentCasingInFileNames\\": true
    }
  }
",
      "name": "tsconfig.json",
      "type": "FILE",
    },
  ],
  "name": "associations",
  "type": "DIRECTORY",
}
`;
