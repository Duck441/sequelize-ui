// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sequelize Framework schema - fields generates correct code 1`] = `
Object {
  "files": Array [
    Object {
      "files": Array [
        Object {
          "content": "module.exports = {
  development: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME || 'fields',
    username: process.env.POSTGRES_DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
    host: process.env.POSTGRES_DB_HOST || 'localhost',
    port: parseInt(process.env.POSTGRES_DB_PORT || '5432')
  },
  test: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME || 'fields',
    username: process.env.POSTGRES_DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
    host: process.env.POSTGRES_DB_HOST || 'localhost',
    port: parseInt(process.env.POSTGRES_DB_PORT || '5432')
  },
  production: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME,
    username: process.env.POSTGRES_DB_USERNAME,
    password: process.env.POSTGRES_DB_PASSWORD,
    host: process.env.POSTGRES_DB_HOST,
    port: parseInt(process.env.POSTGRES_DB_PORT)
  }
}",
          "name": "config.js",
          "type": "FILE",
        },
      ],
      "name": "config",
      "type": "DIRECTORY",
    },
    Object {
      "files": Array [
        Object {
          "content": "import type { Sequelize, Model } from 'sequelize'
import { Category } from './Category'
import type { CategoryAttributes, CategoryCreationAttributes } from './Category'

export {
  Category
}

export type {
  CategoryAttributes,
  CategoryCreationAttributes
}

export function initModels(sequelize: Sequelize) {
  Category.initModel(sequelize)

  

  return {
    Category
  }
}
",
          "name": "index.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'

export interface CategoryAttributes {
  field?: string
  pkField?: string
  requiredField: string
  optionalField?: string
}

export type CategoryPk = 'pkField'
export type CategoryId = CategoryAttributes[CategoryPk]
export type CategoryCreationAttributes = Optional<CategoryAttributes, CategoryPk>

export class Category extends Model<CategoryAttributes, CategoryCreationAttributes> implements CategoryAttributes {
  public field?: string
  public readonly pkField?: string
  public requiredField!: string
  public optionalField?: string
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Category {
    Category.init({
      field: {
        type: DataTypes.STRING
      },
      pkField: {
        type: DataTypes.STRING,
        primaryKey: true
      },
      requiredField: {
        type: DataTypes.STRING,
        allowNull: false
      },
      optionalField: {
        type: DataTypes.STRING,
        unique: true
      }
    }, {
      sequelize
    })
    
    return Category
  }
}
",
          "name": "Category.ts",
          "type": "FILE",
        },
      ],
      "name": "models",
      "type": "DIRECTORY",
    },
    Object {
      "content": "node_modules/
dist
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.tmp
",
      "name": ".gitignore",
      "type": "FILE",
    },
    Object {
      "content": "import { Sequelize, Options } from 'sequelize'
import configs from './config/config.js'

const env = process.env.NODE_ENV || 'development'
const config = (configs as {[key: string]: Options})[env]

const db: Sequelize = new Sequelize({
  ...config,
  define: {
    underscored: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at'
  }
})

export default db
",
      "name": "db.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
  \\"name\\": \\"fields\\",
  \\"version\\": \\"0.0.1\\",
  \\"description\\": \\"\\",
  \\"main\\": \\"server.ts\\",
  \\"scripts\\": {
    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\",
    \\"db:create\\": \\"sequelize db:create\\",
    \\"db:drop\\": \\"sequelize db:drop\\",
    \\"build\\": \\"tsc\\",
    \\"start\\": \\"node ./dist/server.js\\",
    \\"dev\\": \\"tsc-watch --onSuccess \\\\\\"node ./dist/server.js\\\\\\"\\"
  },
  \\"author\\": \\"\\",
  \\"license\\": \\"ISC\\",
  \\"dependencies\\": {
    \\"pg\\": \\"^8.5.1\\",
    \\"pg-hstore\\": \\"^2.3.3\\",
    \\"sequelize\\": \\"^6.3.5\\"
  },
  \\"devDependencies\\": {
    \\"@types/node\\": \\"^14.14.20\\",
    \\"@types/validator\\": \\"^13.1.3\\",
    \\"sequelize-cli\\": \\"^6.2.0\\",
    \\"tsc-watch\\": \\"^4.2.9\\",
    \\"typescript\\": \\"^4.1.3\\"
  }
}

",
      "name": "package.json",
      "type": "FILE",
    },
    Object {
      "content": "import http from 'http'
import db from './db'
import { initModels } from './models'

async function run() {
  initModels(db)
  await db.sync()
  const hostname = process.env.HOSTNAME || '127.0.0.1'
  const port = parseInt(process.env.PORT || '3000')
  const server = http.createServer((req, res) => {
    res.statusCode = 200
    res.setHeader('Content-Type', 'text/plain')
    res.end('Hello World')
  })
  
  server.listen(port, hostname, () => {
    console.log(\`Server running at http://\${hostname}:\${port}/\`)
  })
}

run()",
      "name": "server.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
    \\"compilerOptions\\": {
      \\"target\\": \\"ES2020\\",
      \\"module\\": \\"commonjs\\",
      \\"lib\\": [\\"ES2020\\"],
      \\"outDir\\": \\"dist\\",
      \\"strict\\": true,
      \\"moduleResolution\\": \\"node\\",
      \\"esModuleInterop\\": true,
      \\"allowJs\\": true,
      \\"forceConsistentCasingInFileNames\\": true
    }
  }
",
      "name": "tsconfig.json",
      "type": "FILE",
    },
  ],
  "name": "fields",
  "type": "DIRECTORY",
}
`;
