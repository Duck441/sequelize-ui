// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sequelize Framework no prefix pks options generates correct code 1`] = `
Object {
  "files": Array [
    Object {
      "files": Array [
        Object {
          "content": "module.exports = {
  development: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME || 'fields',
    username: process.env.POSTGRES_DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
    host: process.env.POSTGRES_DB_HOST || 'localhost',
    port: parseInt(process.env.POSTGRES_DB_PORT || '5432')
  },
  test: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME || 'fields',
    username: process.env.POSTGRES_DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
    host: process.env.POSTGRES_DB_HOST || 'localhost',
    port: parseInt(process.env.POSTGRES_DB_PORT || '5432')
  },
  production: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME,
    username: process.env.POSTGRES_DB_USERNAME,
    password: process.env.POSTGRES_DB_PASSWORD,
    host: process.env.POSTGRES_DB_HOST,
    port: parseInt(process.env.POSTGRES_DB_PORT)
  }
}",
          "name": "config.js",
          "type": "FILE",
        },
      ],
      "name": "config",
      "type": "DIRECTORY",
    },
    Object {
      "files": Array [
        Object {
          "content": "const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('defaults', {
      id: {
        type: DataTypes.INTEGER,
        field: 'id',
        primaryKey: true
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'created_at'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updated_at'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('defaults');
  },
};",
          "name": "20200401000000-create-defaults.js",
          "type": "FILE",
        },
        Object {
          "content": "const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('ids', {
      id: {
        type: DataTypes.INTEGER,
        field: 'id',
        primaryKey: true
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'created_at'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updated_at'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('ids');
  },
};",
          "name": "20200401000010-create-ids.js",
          "type": "FILE",
        },
        Object {
          "content": "const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('prefixeds', {
      id: {
        type: DataTypes.INTEGER,
        field: 'id',
        primaryKey: true
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'created_at'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updated_at'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('prefixeds');
  },
};",
          "name": "20200401000020-create-prefixeds.js",
          "type": "FILE",
        },
        Object {
          "content": "const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('nonstandards', {
      otherId: {
        type: DataTypes.INTEGER,
        field: 'other_id',
        primaryKey: true
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'created_at'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updated_at'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('nonstandards');
  },
};",
          "name": "20200401000030-create-nonstandards.js",
          "type": "FILE",
        },
      ],
      "name": "migrations",
      "type": "DIRECTORY",
    },
    Object {
      "files": Array [
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'

export interface DefaultAttributes {
  
}

export type DefaultId = number
export type DefaultCreationAttributes = DefaultAttributes & { id?: number }

export class Default
  extends Model<DefaultAttributes, DefaultCreationAttributes>
  implements DefaultAttributes {
  public readonly id?: number
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Default {
    Default.init({
      
    }, {
      sequelize
    })
    
    return Default
  }
}
",
          "name": "Default.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'

export interface IdAttributes {
  id?: number
}

export type IdPk = 'id'
export type IdId = IdAttributes[IdPk]
export type IdCreationAttributes = Optional<IdAttributes, IdPk>

export class Id
  extends Model<IdAttributes, IdCreationAttributes>
  implements IdAttributes {
  public readonly id?: number
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Id {
    Id.init({
      id: {
        type: DataTypes.INTEGER,
        primaryKey: true
      }
    }, {
      sequelize
    })
    
    return Id
  }
}
",
          "name": "Id.ts",
          "type": "FILE",
        },
        Object {
          "content": "import type { Sequelize, Model } from 'sequelize'
import { Default } from './Default'
import type { DefaultAttributes, DefaultCreationAttributes } from './Default'
import { Id } from './Id'
import type { IdAttributes, IdCreationAttributes } from './Id'
import { Prefixed } from './Prefixed'
import type { PrefixedAttributes, PrefixedCreationAttributes } from './Prefixed'
import { Nonstandard } from './Nonstandard'
import type { NonstandardAttributes, NonstandardCreationAttributes } from './Nonstandard'

export {
  Default,
  Id,
  Prefixed,
  Nonstandard
}

export type {
  DefaultAttributes,
  DefaultCreationAttributes,
  IdAttributes,
  IdCreationAttributes,
  PrefixedAttributes,
  PrefixedCreationAttributes,
  NonstandardAttributes,
  NonstandardCreationAttributes
}

export function initModels(sequelize: Sequelize) {
  Default.initModel(sequelize)
  Id.initModel(sequelize)
  Prefixed.initModel(sequelize)
  Nonstandard.initModel(sequelize)

  return {
    Default,
    Id,
    Prefixed,
    Nonstandard
  }
}
",
          "name": "index.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'

export interface NonstandardAttributes {
  otherId?: number
}

export type NonstandardPk = 'otherId'
export type NonstandardId = NonstandardAttributes[NonstandardPk]
export type NonstandardCreationAttributes = Optional<NonstandardAttributes, NonstandardPk>

export class Nonstandard
  extends Model<NonstandardAttributes, NonstandardCreationAttributes>
  implements NonstandardAttributes {
  public readonly otherId?: number
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Nonstandard {
    Nonstandard.init({
      otherId: {
        type: DataTypes.INTEGER,
        primaryKey: true
      }
    }, {
      sequelize
    })
    
    return Nonstandard
  }
}
",
          "name": "Nonstandard.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'

export interface PrefixedAttributes {
  id?: number
}

export type PrefixedPk = 'id'
export type PrefixedId = PrefixedAttributes[PrefixedPk]
export type PrefixedCreationAttributes = Optional<PrefixedAttributes, PrefixedPk>

export class Prefixed
  extends Model<PrefixedAttributes, PrefixedCreationAttributes>
  implements PrefixedAttributes {
  public readonly id?: number
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Prefixed {
    Prefixed.init({
      id: {
        type: DataTypes.INTEGER,
        primaryKey: true
      }
    }, {
      sequelize
    })
    
    return Prefixed
  }
}
",
          "name": "Prefixed.ts",
          "type": "FILE",
        },
      ],
      "name": "models",
      "type": "DIRECTORY",
    },
    Object {
      "content": "node_modules/
dist
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.tmp
",
      "name": ".gitignore",
      "type": "FILE",
    },
    Object {
      "content": "import { Sequelize, Options } from 'sequelize'
import configs from './config/config.js'

const env = process.env.NODE_ENV || 'development'
const config = (configs as {[key: string]: Options})[env]

const db: Sequelize = new Sequelize({
  ...config,
  define: {
    underscored: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at'
  }
})

export default db
",
      "name": "db.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
  \\"name\\": \\"fields\\",
  \\"version\\": \\"0.0.1\\",
  \\"description\\": \\"\\",
  \\"main\\": \\"server.ts\\",
  \\"scripts\\": {
    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\",
    \\"db:up\\": \\"echo creating && npm run db:create && echo created && npm run db:migrate && echo migrated\\",
    \\"db:reset\\": \\"npm run db:drop && npm run db:up\\",
    \\"db:create\\": \\"sequelize db:create\\",
    \\"db:drop\\": \\"[[ $NODE_ENV == production ]] && exit 1 || sequelize db:drop\\",
    \\"db:migrate\\": \\"sequelize db:migrate\\",
    \\"db:rollback\\": \\"sequelize db:migrate:undo\\",
    \\"db:rollback:all\\": \\"sequelize db:migrate:undo:all\\",
    \\"build\\": \\"tsc\\",
    \\"start\\": \\"node ./dist/server.js\\",
    \\"dev\\": \\"tsc-watch --onSuccess \\\\\\"node ./dist/server.js\\\\\\"\\"
  },
  \\"author\\": \\"\\",
  \\"license\\": \\"ISC\\",
  \\"dependencies\\": {
    \\"pg\\": \\"^8.7.1\\",
    \\"pg-hstore\\": \\"^2.3.4\\",
    \\"sequelize\\": \\"^6.14.1\\"
  },
  \\"devDependencies\\": {
    \\"@types/node\\": \\"^16.11.7\\",
    \\"@types/validator\\": \\"^13.7.1\\",
    \\"sequelize-cli\\": \\"^6.4.1\\",
    \\"tsc-watch\\": \\"^4.6.0\\",
    \\"typescript\\": \\"^4.5.5\\"
  }
}

",
      "name": "package.json",
      "type": "FILE",
    },
    Object {
      "content": "# fields
This project was generated with [Sequelize UI](https://github.com/tomjschuster/sequelize-ui). The project is a simple [Node.js](https://nodejs.dev/) server with [Sequelize ORM](https://sequelize.org/).

Be sure to test all code for correctness and to test database migrations in a test environment before deploying to production.

## Running Project

### Prerequesites
- [Node.js](https://nodejs.dev/)
- [PostgreSQL](https://www.postgresql.org/)

### Setup
1. Install dependencies: \`npm install\`
2. Setup database: \`npm run db:up\`

### Run
- Local development: \`npm run dev\`
- Production build: \`npm run build && npm start\`

## Bug Reports
Please report any bugs with generated code at [Sequelize UI Issues](https://github.com/tomjschuster/sequelize-ui/issues).
",
      "name": "README.md",
      "type": "FILE",
    },
    Object {
      "content": "import http from 'http'
import db from './db'
import { initModels } from './models'

async function run() {
  initModels(db)
  const hostname = process.env.HOSTNAME || '127.0.0.1'
  const port = parseInt(process.env.PORT || '3000')
  
  const server = http.createServer((req, res) => {
    res.statusCode = 200
    res.setHeader('Content-Type', 'text/plain')
    res.end('Hello World')
  })
  
  server.listen(port, hostname, () => {
    console.log(\`Server running at http://\${hostname}:\${port}/\`)
  })
}

run()",
      "name": "server.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
  \\"compilerOptions\\": {
    \\"target\\": \\"ES2020\\",
    \\"module\\": \\"commonjs\\",
    \\"lib\\": [\\"ES2020\\"],
    \\"outDir\\": \\"dist\\",
    \\"strict\\": true,
    \\"moduleResolution\\": \\"node\\",
    \\"esModuleInterop\\": true,
    \\"allowJs\\": true,
    \\"forceConsistentCasingInFileNames\\": true
  }
}
",
      "name": "tsconfig.json",
      "type": "FILE",
    },
  ],
  "name": "fields",
  "type": "DIRECTORY",
}
`;
