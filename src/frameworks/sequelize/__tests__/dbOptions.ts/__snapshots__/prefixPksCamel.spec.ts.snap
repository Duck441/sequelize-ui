// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sequelize Framework prefix pks options generates correct code 1`] = `
Object {
  "files": Array [
    Object {
      "files": Array [
        Object {
          "content": "module.exports = {
  development: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME || 'fields',
    username: process.env.POSTGRES_DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
    host: process.env.POSTGRES_DB_HOST || 'localhost',
    port: parseInt(process.env.POSTGRES_DB_PORT || '5432')
  },
  test: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME || 'fields',
    username: process.env.POSTGRES_DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
    host: process.env.POSTGRES_DB_HOST || 'localhost',
    port: parseInt(process.env.POSTGRES_DB_PORT || '5432')
  },
  production: {
    dialect: 'postgres',
    database: process.env.POSTGRES_DB_NAME,
    username: process.env.POSTGRES_DB_USERNAME,
    password: process.env.POSTGRES_DB_PASSWORD,
    host: process.env.POSTGRES_DB_HOST,
    port: parseInt(process.env.POSTGRES_DB_PORT)
  }
}",
          "name": "config.js",
          "type": "FILE",
        },
      ],
      "name": "config",
      "type": "DIRECTORY",
    },
    Object {
      "files": Array [
        Object {
          "content": "const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Defaults', {
      defaultId: {
        type: DataTypes.INTEGER,
        field: 'defaultId',
        primaryKey: true
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Defaults');
  },
};",
          "name": "20200401000000-create-Defaults.js",
          "type": "FILE",
        },
        Object {
          "content": "const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Ids', {
      idId: {
        type: DataTypes.INTEGER,
        field: 'idId',
        primaryKey: true
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Ids');
  },
};",
          "name": "20200401000010-create-Ids.js",
          "type": "FILE",
        },
        Object {
          "content": "const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Prefixeds', {
      prefixedId: {
        type: DataTypes.INTEGER,
        field: 'prefixedId',
        primaryKey: true
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Prefixeds');
  },
};",
          "name": "20200401000020-create-Prefixeds.js",
          "type": "FILE",
        },
        Object {
          "content": "const DataTypes = require('sequelize').DataTypes

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Nonstandards', {
      otherId: {
        type: DataTypes.INTEGER,
        field: 'otherId',
        primaryKey: true
      },
      createdAt: {
        type: DataTypes.DATE,
        field: 'createdAt'
      },
      updatedAt: {
        type: DataTypes.DATE,
        field: 'updatedAt'
      }
    })
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Nonstandards');
  },
};",
          "name": "20200401000030-create-Nonstandards.js",
          "type": "FILE",
        },
      ],
      "name": "migrations",
      "type": "DIRECTORY",
    },
    Object {
      "files": Array [
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'

export interface DefaultAttributes {
  defaultId?: number
}

export type DefaultPk = 'defaultId'
export type DefaultId = DefaultAttributes[DefaultPk]
export type DefaultCreationAttributes = Optional<DefaultAttributes, DefaultPk>

export class Default
  extends Model<DefaultAttributes, DefaultCreationAttributes>
  implements DefaultAttributes {
  public readonly defaultId?: number
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Default {
    Default.init({
      defaultId: {
        type: DataTypes.INTEGER,
        primaryKey: true
      }
    }, {
      sequelize
    })
    
    return Default
  }
}
",
          "name": "Default.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'

export interface IdAttributes {
  idId?: number
}

export type IdPk = 'idId'
export type IdId = IdAttributes[IdPk]
export type IdCreationAttributes = Optional<IdAttributes, IdPk>

export class Id
  extends Model<IdAttributes, IdCreationAttributes>
  implements IdAttributes {
  public readonly idId?: number
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Id {
    Id.init({
      idId: {
        type: DataTypes.INTEGER,
        primaryKey: true
      }
    }, {
      sequelize
    })
    
    return Id
  }
}
",
          "name": "Id.ts",
          "type": "FILE",
        },
        Object {
          "content": "import type { Sequelize, Model } from 'sequelize'
import { Default } from './Default'
import type { DefaultAttributes, DefaultCreationAttributes } from './Default'
import { Id } from './Id'
import type { IdAttributes, IdCreationAttributes } from './Id'
import { Prefixed } from './Prefixed'
import type { PrefixedAttributes, PrefixedCreationAttributes } from './Prefixed'
import { Nonstandard } from './Nonstandard'
import type { NonstandardAttributes, NonstandardCreationAttributes } from './Nonstandard'

export {
  Default,
  Id,
  Prefixed,
  Nonstandard
}

export type {
  DefaultAttributes,
  DefaultCreationAttributes,
  IdAttributes,
  IdCreationAttributes,
  PrefixedAttributes,
  PrefixedCreationAttributes,
  NonstandardAttributes,
  NonstandardCreationAttributes
}

export function initModels(sequelize: Sequelize) {
  Default.initModel(sequelize)
  Id.initModel(sequelize)
  Prefixed.initModel(sequelize)
  Nonstandard.initModel(sequelize)

  return {
    Default,
    Id,
    Prefixed,
    Nonstandard
  }
}
",
          "name": "index.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'

export interface NonstandardAttributes {
  otherId?: number
}

export type NonstandardPk = 'otherId'
export type NonstandardId = NonstandardAttributes[NonstandardPk]
export type NonstandardCreationAttributes = Optional<NonstandardAttributes, NonstandardPk>

export class Nonstandard
  extends Model<NonstandardAttributes, NonstandardCreationAttributes>
  implements NonstandardAttributes {
  public readonly otherId?: number
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Nonstandard {
    Nonstandard.init({
      otherId: {
        type: DataTypes.INTEGER,
        primaryKey: true
      }
    }, {
      sequelize
    })
    
    return Nonstandard
  }
}
",
          "name": "Nonstandard.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'

export interface PrefixedAttributes {
  prefixedId?: number
}

export type PrefixedPk = 'prefixedId'
export type PrefixedId = PrefixedAttributes[PrefixedPk]
export type PrefixedCreationAttributes = Optional<PrefixedAttributes, PrefixedPk>

export class Prefixed
  extends Model<PrefixedAttributes, PrefixedCreationAttributes>
  implements PrefixedAttributes {
  public readonly prefixedId?: number
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Prefixed {
    Prefixed.init({
      prefixedId: {
        type: DataTypes.INTEGER,
        primaryKey: true
      }
    }, {
      sequelize
    })
    
    return Prefixed
  }
}
",
          "name": "Prefixed.ts",
          "type": "FILE",
        },
      ],
      "name": "models",
      "type": "DIRECTORY",
    },
    Object {
      "content": "node_modules/
dist
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.tmp
",
      "name": ".gitignore",
      "type": "FILE",
    },
    Object {
      "content": "import { Sequelize, Options } from 'sequelize'
import configs from './config/config.js'

const env = process.env.NODE_ENV || 'development'
const config = (configs as {[key: string]: Options})[env]

const db: Sequelize = new Sequelize({
  ...config
})

export default db
",
      "name": "db.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
  \\"name\\": \\"fields\\",
  \\"version\\": \\"0.0.1\\",
  \\"description\\": \\"\\",
  \\"main\\": \\"server.ts\\",
  \\"scripts\\": {
    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\",
    \\"db:up\\": \\"echo creating && npm run db:create && echo created && npm run db:migrate && echo migrated\\",
    \\"db:reset\\": \\"npm run db:drop && npm run db:up\\",
    \\"db:create\\": \\"sequelize db:create\\",
    \\"db:drop\\": \\"[[ $NODE_ENV == production ]] && exit 1 || sequelize db:drop\\",
    \\"db:migrate\\": \\"sequelize db:migrate\\",
    \\"db:rollback\\": \\"sequelize db:migrate:undo\\",
    \\"db:rollback:all\\": \\"sequelize db:migrate:undo:all\\",
    \\"build\\": \\"tsc\\",
    \\"start\\": \\"node ./dist/server.js\\",
    \\"dev\\": \\"tsc-watch --onSuccess \\\\\\"node ./dist/server.js\\\\\\"\\"
  },
  \\"author\\": \\"\\",
  \\"license\\": \\"ISC\\",
  \\"dependencies\\": {
    \\"pg\\": \\"^8.5.1\\",
    \\"pg-hstore\\": \\"^2.3.3\\",
    \\"sequelize\\": \\"^6.3.5\\"
  },
  \\"devDependencies\\": {
    \\"@types/node\\": \\"^14.14.20\\",
    \\"@types/validator\\": \\"^13.1.3\\",
    \\"sequelize-cli\\": \\"^6.2.0\\",
    \\"tsc-watch\\": \\"^4.2.9\\",
    \\"typescript\\": \\"^4.1.3\\"
  }
}

",
      "name": "package.json",
      "type": "FILE",
    },
    Object {
      "content": "# fields
This project was generated with [Sequelize UI](https://github.com/tomjschuster/sequelize-ui).

## Getting Started

### Prerequesites
- [Node.js](https://nodejs.dev/)
- [PostgreSQL](https://www.postgresql.org/)

### Setup
1. Install dependencies: \`npm install\`
2. Setup database: \`npm run db:up\`
### Run
- Local development: \`npm run dev\`
- Production build: \`npm run build && npm start\`

## Bug Reports
Please report any bugs with generated code at [Sequelize UI Issues](https://github.com/tomjschuster/sequelize-ui/issues).

## License
MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\"Software\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
",
      "name": "README.md",
      "type": "FILE",
    },
    Object {
      "content": "import http from 'http'
import db from './db'
import { initModels } from './models'

async function run() {
  initModels(db)
  const hostname = process.env.HOSTNAME || '127.0.0.1'
  const port = parseInt(process.env.PORT || '3000')
  
  const server = http.createServer((req, res) => {
    res.statusCode = 200
    res.setHeader('Content-Type', 'text/plain')
    res.end('Hello World')
  })
  
  server.listen(port, hostname, () => {
    console.log(\`Server running at http://\${hostname}:\${port}/\`)
  })
}

run()",
      "name": "server.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
  \\"compilerOptions\\": {
    \\"target\\": \\"ES2020\\",
    \\"module\\": \\"commonjs\\",
    \\"lib\\": [\\"ES2020\\"],
    \\"outDir\\": \\"dist\\",
    \\"strict\\": true,
    \\"moduleResolution\\": \\"node\\",
    \\"esModuleInterop\\": true,
    \\"allowJs\\": true,
    \\"forceConsistentCasingInFileNames\\": true
  }
}
",
      "name": "tsconfig.json",
      "type": "FILE",
    },
  ],
  "name": "fields",
  "type": "DIRECTORY",
}
`;
