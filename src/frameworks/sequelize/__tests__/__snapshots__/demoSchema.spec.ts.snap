// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sequelize Framework schema generates correct code for sakila 1`] = `
Object {
  "files": Array [
    Object {
      "files": Array [
        Object {
          "content": "import type { Sequelize, Model } from 'sequelize'
import { Actor } from './Actor'
import type { ActorAttributes, ActorCreationAttributes } from './Actor'
import { Film } from './Film'
import type { FilmAttributes, FilmCreationAttributes } from './Film'
import { Language } from './Language'
import type { LanguageAttributes, LanguageCreationAttributes } from './Language'
import { Category } from './Category'
import type { CategoryAttributes, CategoryCreationAttributes } from './Category'
import { Inventory } from './Inventory'
import type { InventoryAttributes, InventoryCreationAttributes } from './Inventory'
import { Store } from './Store'
import type { StoreAttributes, StoreCreationAttributes } from './Store'
import { Staff } from './Staff'
import type { StaffAttributes, StaffCreationAttributes } from './Staff'
import { Customer } from './Customer'
import type { CustomerAttributes, CustomerCreationAttributes } from './Customer'
import { Address } from './Address'
import type { AddressAttributes, AddressCreationAttributes } from './Address'
import { Rental } from './Rental'
import type { RentalAttributes, RentalCreationAttributes } from './Rental'
import { Payment } from './Payment'
import type { PaymentAttributes, PaymentCreationAttributes } from './Payment'
import { City } from './City'
import type { CityAttributes, CityCreationAttributes } from './City'
import { Country } from './Country'
import type { CountryAttributes, CountryCreationAttributes } from './Country'
import { FilmActor } from './FilmActor'
import type { FilmActorAttributes, FilmActorCreationAttributes } from './FilmActor'
import { FilmCategory } from './FilmCategory'
import type { FilmCategoryAttributes, FilmCategoryCreationAttributes } from './FilmCategory'

export {
  Actor,
  Film,
  Language,
  Category,
  Inventory,
  Store,
  Staff,
  Customer,
  Address,
  Rental,
  Payment,
  City,
  Country,
  FilmActor,
  FilmCategory
}

export type {
  ActorAttributes,
  ActorCreationAttributes,
  FilmAttributes,
  FilmCreationAttributes,
  LanguageAttributes,
  LanguageCreationAttributes,
  CategoryAttributes,
  CategoryCreationAttributes,
  InventoryAttributes,
  InventoryCreationAttributes,
  StoreAttributes,
  StoreCreationAttributes,
  StaffAttributes,
  StaffCreationAttributes,
  CustomerAttributes,
  CustomerCreationAttributes,
  AddressAttributes,
  AddressCreationAttributes,
  RentalAttributes,
  RentalCreationAttributes,
  PaymentAttributes,
  PaymentCreationAttributes,
  CityAttributes,
  CityCreationAttributes,
  CountryAttributes,
  CountryCreationAttributes,
  FilmActorAttributes,
  FilmActorCreationAttributes,
  FilmCategoryAttributes,
  FilmCategoryCreationAttributes
}

export function initModels(sequelize: Sequelize) {
  Actor.initModel(sequelize)
  Film.initModel(sequelize)
  Language.initModel(sequelize)
  Category.initModel(sequelize)
  Inventory.initModel(sequelize)
  Store.initModel(sequelize)
  Staff.initModel(sequelize)
  Customer.initModel(sequelize)
  Address.initModel(sequelize)
  Rental.initModel(sequelize)
  Payment.initModel(sequelize)
  City.initModel(sequelize)
  Country.initModel(sequelize)
  FilmActor.initModel(sequelize)
  FilmCategory.initModel(sequelize)

  Actor.belongsToMany(Film, {
    through: FilmActor,
    foreignKey: 'actor_id_id',
    otherKey: 'film_id_id',
    onDelete: 'CASCADE'
  })
  Film.belongsTo(Language, {
    foreignKey: 'language_id'
  })
  Film.belongsTo(Language, {
    as: 'originalLanguage',
    foreignKey: 'original_language_id_id'
  })
  Film.hasMany(Inventory, {
    foreignKey: 'film_id_id'
  })
  Film.belongsToMany(Actor, {
    through: FilmActor,
    foreignKey: 'film_id_id',
    otherKey: 'actor_id_id',
    onDelete: 'CASCADE'
  })
  Film.belongsToMany(Category, {
    through: FilmCategory,
    foreignKey: 'film_id_id',
    otherKey: 'category_id_id',
    onDelete: 'CASCADE'
  })
  Language.hasMany(Film, {
    foreignKey: 'language_id'
  })
  Language.hasMany(Film, {
    as: 'originalLanguageFilms',
    foreignKey: 'original_language_id_id'
  })
  Category.belongsToMany(Film, {
    through: FilmCategory,
    foreignKey: 'category_id_id',
    otherKey: 'film_id_id',
    onDelete: 'CASCADE'
  })
  Inventory.belongsTo(Film, {
    foreignKey: 'film_id'
  })
  Inventory.belongsTo(Store, {
    foreignKey: 'store_id'
  })
  Store.hasMany(Inventory, {
    foreignKey: 'store_id'
  })
  Store.hasMany(Staff, {
    foreignKey: 'store_id'
  })
  Store.hasMany(Customer, {
    foreignKey: 'store_id'
  })
  Store.belongsTo(Staff, {
    as: 'manager',
    foreignKey: 'manager_staff_id_id'
  })
  Store.belongsTo(Address, {
    foreignKey: 'address_id'
  })
  Staff.belongsTo(Store, {
    foreignKey: 'store_id'
  })
  Staff.hasMany(Store, {
    as: 'managedStores',
    foreignKey: 'manager_staff_id_id'
  })
  Staff.belongsTo(Address, {
    foreignKey: 'address_id'
  })
  Staff.hasMany(Rental, {
    foreignKey: 'staff_id'
  })
  Staff.hasMany(Payment, {
    foreignKey: 'staff_id'
  })
  Customer.belongsTo(Store, {
    foreignKey: 'store_id'
  })
  Customer.belongsTo(Address, {
    foreignKey: 'address_id'
  })
  Customer.hasMany(Rental, {
    foreignKey: 'customer_id'
  })
  Customer.hasMany(Payment, {
    foreignKey: 'customer_id'
  })
  Address.belongsTo(City, {
    foreignKey: 'city_id'
  })
  Address.hasOne(Customer, {
    foreignKey: 'address_id'
  })
  Address.hasOne(Staff, {
    foreignKey: 'address_id'
  })
  Address.hasOne(Store, {
    foreignKey: 'address_id'
  })
  Rental.belongsTo(Inventory, {
    foreignKey: 'inventory_id'
  })
  Rental.belongsTo(Customer, {
    foreignKey: 'customer_id'
  })
  Rental.belongsTo(Staff, {
    foreignKey: 'staff_id'
  })
  Rental.hasMany(Payment, {
    foreignKey: 'rental_id'
  })
  Payment.belongsTo(Customer, {
    foreignKey: 'customer_id'
  })
  Payment.belongsTo(Staff, {
    foreignKey: 'staff_id'
  })
  Payment.belongsTo(Rental, {
    foreignKey: 'rental_id'
  })
  City.belongsTo(Country, {
    foreignKey: 'country_id'
  })
  City.hasMany(Address, {
    foreignKey: 'city_id'
  })
  Country.hasMany(City, {
    foreignKey: 'country_id'
  })
  FilmActor.belongsTo(Film, {
    foreignKey: 'film_id'
  })
  FilmActor.belongsTo(Actor, {
    foreignKey: 'actor_id'
  })
  FilmCategory.belongsTo(Film, {
    foreignKey: 'film_id'
  })
  FilmCategory.belongsTo(Category, {
    foreignKey: 'category_id'
  })

  return {
    Actor,
    Film,
    Language,
    Category,
    Inventory,
    Store,
    Staff,
    Customer,
    Address,
    Rental,
    Payment,
    City,
    Country,
    FilmActor,
    FilmCategory
  }
}
",
          "name": "index.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Film, FilmId } from './Film'

export interface ActorAttributes {
  actorId: number
  firstName: string
  lastName: string
}

export type ActorPk = 'actorId'
export type ActorId = ActorAttributes[ActorPk]
export type ActorCreationAttributes = Optional<ActorAttributes, ActorPk>

export class Actor extends Model<ActorAttributes, ActorCreationAttributes> implements ActorAttributes {
  public readonly actorId!: number
  public firstName!: string
  public lastName!: string

  // Actor belongsToMany Film
  public readonly films?: Film[]
  public getFilms!: Sequelize.BelongsToManyGetAssociationsMixin<Film>
  public setFilms!: Sequelize.BelongsToManySetAssociationsMixin<Film, FilmId>
  public addFilm!: Sequelize.BelongsToManyAddAssociationMixin<Film, FilmId>
  public addFilms!: Sequelize.BelongsToManyAddAssociationsMixin<Film, FilmId>
  public createFilm!: Sequelize.BelongsToManyCreateAssociationMixin<Film>
  public removeFilm!: Sequelize.BelongsToManyRemoveAssociationMixin<Film, FilmId>
  public removeFilms!: Sequelize.BelongsToManyRemoveAssociationsMixin<Film, FilmId>
  public hasFilm!: Sequelize.BelongsToManyHasAssociationMixin<Film, FilmId>
  public hasFilms!: Sequelize.BelongsToManyHasAssociationsMixin<Film, FilmId>
  public countFilms!: Sequelize.BelongsToManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Actor {
    Actor.init({
      actorId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      firstName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      lastName: {
        type: DataTypes.STRING,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Actor
  }
}
",
          "name": "Actor.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Actor, ActorId } from './Actor'
import type { Category, CategoryId } from './Category'
import type { Inventory, InventoryId } from './Inventory'
import type { Language, LanguageId } from './Language'

export interface FilmAttributes {
  filmId: number
  title: string
  description?: string
  releaseYear?: number
  languageId: number
  originalLanguageId?: number
  rentalDuration: number
  rentalRate: number
  length?: number
  rating: 'G' | 'PG' | 'PG-13' | 'R' | 'NC-17'
  specialFeature: Array<'Trailers' | 'Commentaries' | 'Deleted Scenes' | 'Behind the Scenes'>
}

export type FilmPk = 'filmId'
export type FilmId = FilmAttributes[FilmPk]
export type FilmCreationAttributes = Optional<FilmAttributes, FilmPk>

export class Film extends Model<FilmAttributes, FilmCreationAttributes> implements FilmAttributes {
  public readonly filmId!: number
  public title!: string
  public description?: string
  public releaseYear?: number
  public languageId!: number
  public originalLanguageId?: number
  public rentalDuration!: number
  public rentalRate!: number
  public length?: number
  public rating!: 'G' | 'PG' | 'PG-13' | 'R' | 'NC-17'
  public specialFeature!: Array<'Trailers' | 'Commentaries' | 'Deleted Scenes' | 'Behind the Scenes'>

  // Film belongsTo Language
  public readonly language?: Language
  public getLanguage!: Sequelize.BelongsToGetAssociationMixin<Language>
  public setLanguage!: Sequelize.BelongsToSetAssociationMixin<Language, LanguageId>
  public createLanguage!: Sequelize.BelongsToCreateAssociationMixin<Language>
  
  // Film belongsTo Language (as OriginalLanguage)
  public readonly originalLanguage?: Language
  public getOriginalLanguage!: Sequelize.BelongsToGetAssociationMixin<Language>
  public setOriginalLanguage!: Sequelize.BelongsToSetAssociationMixin<Language, LanguageId>
  public createOriginalLanguage!: Sequelize.BelongsToCreateAssociationMixin<Language>
  
  // Film hasMany Inventory
  public readonly inventories?: Inventory[]
  public getInventories!: Sequelize.HasManyGetAssociationsMixin<Inventory>
  public setInventories!: Sequelize.HasManySetAssociationsMixin<Inventory, InventoryId>
  public addInventory!: Sequelize.HasManyAddAssociationMixin<Inventory, InventoryId>
  public addInventories!: Sequelize.HasManyAddAssociationsMixin<Inventory, InventoryId>
  public createInventory!: Sequelize.HasManyCreateAssociationMixin<Inventory>
  public removeInventory!: Sequelize.HasManyRemoveAssociationMixin<Inventory, InventoryId>
  public removeInventories!: Sequelize.HasManyRemoveAssociationsMixin<Inventory, InventoryId>
  public hasInventory!: Sequelize.HasManyHasAssociationMixin<Inventory, InventoryId>
  public hasInventories!: Sequelize.HasManyHasAssociationsMixin<Inventory, InventoryId>
  public countInventories!: Sequelize.HasManyCountAssociationsMixin
  
  // Film belongsToMany Actor
  public readonly actors?: Actor[]
  public getActors!: Sequelize.BelongsToManyGetAssociationsMixin<Actor>
  public setActors!: Sequelize.BelongsToManySetAssociationsMixin<Actor, ActorId>
  public addActor!: Sequelize.BelongsToManyAddAssociationMixin<Actor, ActorId>
  public addActors!: Sequelize.BelongsToManyAddAssociationsMixin<Actor, ActorId>
  public createActor!: Sequelize.BelongsToManyCreateAssociationMixin<Actor>
  public removeActor!: Sequelize.BelongsToManyRemoveAssociationMixin<Actor, ActorId>
  public removeActors!: Sequelize.BelongsToManyRemoveAssociationsMixin<Actor, ActorId>
  public hasActor!: Sequelize.BelongsToManyHasAssociationMixin<Actor, ActorId>
  public hasActors!: Sequelize.BelongsToManyHasAssociationsMixin<Actor, ActorId>
  public countActors!: Sequelize.BelongsToManyCountAssociationsMixin
  
  // Film belongsToMany Category
  public readonly categories?: Category[]
  public getCategories!: Sequelize.BelongsToManyGetAssociationsMixin<Category>
  public setCategories!: Sequelize.BelongsToManySetAssociationsMixin<Category, CategoryId>
  public addCategory!: Sequelize.BelongsToManyAddAssociationMixin<Category, CategoryId>
  public addCategories!: Sequelize.BelongsToManyAddAssociationsMixin<Category, CategoryId>
  public createCategory!: Sequelize.BelongsToManyCreateAssociationMixin<Category>
  public removeCategory!: Sequelize.BelongsToManyRemoveAssociationMixin<Category, CategoryId>
  public removeCategories!: Sequelize.BelongsToManyRemoveAssociationsMixin<Category, CategoryId>
  public hasCategory!: Sequelize.BelongsToManyHasAssociationMixin<Category, CategoryId>
  public hasCategories!: Sequelize.BelongsToManyHasAssociationsMixin<Category, CategoryId>
  public countCategories!: Sequelize.BelongsToManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Film {
    Film.init({
      filmId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      title: {
        type: DataTypes.STRING,
        allowNull: false
      },
      description: {
        type: DataTypes.STRING
      },
      releaseYear: {
        type: DataTypes.INTEGER
      },
      languageId: {
        type: DataTypes.INTEGER,
        allowNull: false
      },
      originalLanguageId: {
        type: DataTypes.INTEGER
      },
      rentalDuration: {
        type: DataTypes.INTEGER,
        allowNull: false
      },
      rentalRate: {
        type: DataTypes.DECIMAL,
        allowNull: false
      },
      length: {
        type: DataTypes.INTEGER
      },
      rating: {
        type: DataTypes.ENUM('G', 'PG', 'PG-13', 'R', 'NC-17'),
        allowNull: false
      },
      specialFeature: {
        type: DataTypes.ARRAY(DataTypes.ENUM('Trailers', 'Commentaries', 'Deleted Scenes', 'Behind the Scenes')),
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Film
  }
}
",
          "name": "Film.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Film, FilmId } from './Film'

export interface LanguageAttributes {
  languageId: number
}

export type LanguagePk = 'languageId'
export type LanguageId = LanguageAttributes[LanguagePk]
export type LanguageCreationAttributes = Optional<LanguageAttributes, LanguagePk>

export class Language extends Model<LanguageAttributes, LanguageCreationAttributes> implements LanguageAttributes {
  public readonly languageId!: number

  // Language hasMany Film
  public readonly films?: Film[]
  public getFilms!: Sequelize.HasManyGetAssociationsMixin<Film>
  public setFilms!: Sequelize.HasManySetAssociationsMixin<Film, FilmId>
  public addFilm!: Sequelize.HasManyAddAssociationMixin<Film, FilmId>
  public addFilms!: Sequelize.HasManyAddAssociationsMixin<Film, FilmId>
  public createFilm!: Sequelize.HasManyCreateAssociationMixin<Film>
  public removeFilm!: Sequelize.HasManyRemoveAssociationMixin<Film, FilmId>
  public removeFilms!: Sequelize.HasManyRemoveAssociationsMixin<Film, FilmId>
  public hasFilm!: Sequelize.HasManyHasAssociationMixin<Film, FilmId>
  public hasFilms!: Sequelize.HasManyHasAssociationsMixin<Film, FilmId>
  public countFilms!: Sequelize.HasManyCountAssociationsMixin
  
  // Language hasMany Film (as OriginalLanguageFilm)
  public readonly originalLanguageFilms?: Film[]
  public getOriginalLanguageFilms!: Sequelize.HasManyGetAssociationsMixin<Film>
  public setOriginalLanguageFilms!: Sequelize.HasManySetAssociationsMixin<Film, FilmId>
  public addOriginalLanguageFilm!: Sequelize.HasManyAddAssociationMixin<Film, FilmId>
  public addOriginalLanguageFilms!: Sequelize.HasManyAddAssociationsMixin<Film, FilmId>
  public createOriginalLanguageFilm!: Sequelize.HasManyCreateAssociationMixin<Film>
  public removeOriginalLanguageFilm!: Sequelize.HasManyRemoveAssociationMixin<Film, FilmId>
  public removeOriginalLanguageFilms!: Sequelize.HasManyRemoveAssociationsMixin<Film, FilmId>
  public hasOriginalLanguageFilm!: Sequelize.HasManyHasAssociationMixin<Film, FilmId>
  public hasOriginalLanguageFilms!: Sequelize.HasManyHasAssociationsMixin<Film, FilmId>
  public countOriginalLanguageFilms!: Sequelize.HasManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Language {
    Language.init({
      languageId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Language
  }
}
",
          "name": "Language.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Film, FilmId } from './Film'

export interface CategoryAttributes {
  categoryId: number
}

export type CategoryPk = 'categoryId'
export type CategoryId = CategoryAttributes[CategoryPk]
export type CategoryCreationAttributes = Optional<CategoryAttributes, CategoryPk>

export class Category extends Model<CategoryAttributes, CategoryCreationAttributes> implements CategoryAttributes {
  public readonly categoryId!: number

  // Category belongsToMany Film
  public readonly films?: Film[]
  public getFilms!: Sequelize.BelongsToManyGetAssociationsMixin<Film>
  public setFilms!: Sequelize.BelongsToManySetAssociationsMixin<Film, FilmId>
  public addFilm!: Sequelize.BelongsToManyAddAssociationMixin<Film, FilmId>
  public addFilms!: Sequelize.BelongsToManyAddAssociationsMixin<Film, FilmId>
  public createFilm!: Sequelize.BelongsToManyCreateAssociationMixin<Film>
  public removeFilm!: Sequelize.BelongsToManyRemoveAssociationMixin<Film, FilmId>
  public removeFilms!: Sequelize.BelongsToManyRemoveAssociationsMixin<Film, FilmId>
  public hasFilm!: Sequelize.BelongsToManyHasAssociationMixin<Film, FilmId>
  public hasFilms!: Sequelize.BelongsToManyHasAssociationsMixin<Film, FilmId>
  public countFilms!: Sequelize.BelongsToManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Category {
    Category.init({
      categoryId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Category
  }
}
",
          "name": "Category.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Film, FilmId } from './Film'
import type { Store, StoreId } from './Store'

export interface InventoryAttributes {
  inventoryId: number
}

export type InventoryPk = 'inventoryId'
export type InventoryId = InventoryAttributes[InventoryPk]
export type InventoryCreationAttributes = Optional<InventoryAttributes, InventoryPk>

export class Inventory extends Model<InventoryAttributes, InventoryCreationAttributes> implements InventoryAttributes {
  public readonly inventoryId!: number

  // Inventory belongsTo Film
  public readonly film?: Film
  public getFilm!: Sequelize.BelongsToGetAssociationMixin<Film>
  public setFilm!: Sequelize.BelongsToSetAssociationMixin<Film, FilmId>
  public createFilm!: Sequelize.BelongsToCreateAssociationMixin<Film>
  
  // Inventory belongsTo Store
  public readonly store?: Store
  public getStore!: Sequelize.BelongsToGetAssociationMixin<Store>
  public setStore!: Sequelize.BelongsToSetAssociationMixin<Store, StoreId>
  public createStore!: Sequelize.BelongsToCreateAssociationMixin<Store>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Inventory {
    Inventory.init({
      inventoryId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Inventory
  }
}
",
          "name": "Inventory.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Address, AddressId } from './Address'
import type { Customer, CustomerId } from './Customer'
import type { Inventory, InventoryId } from './Inventory'
import type { Staff, StaffId } from './Staff'

export interface StoreAttributes {
  storeId: number
}

export type StorePk = 'storeId'
export type StoreId = StoreAttributes[StorePk]
export type StoreCreationAttributes = Optional<StoreAttributes, StorePk>

export class Store extends Model<StoreAttributes, StoreCreationAttributes> implements StoreAttributes {
  public readonly storeId!: number

  // Store hasMany Inventory
  public readonly inventories?: Inventory[]
  public getInventories!: Sequelize.HasManyGetAssociationsMixin<Inventory>
  public setInventories!: Sequelize.HasManySetAssociationsMixin<Inventory, InventoryId>
  public addInventory!: Sequelize.HasManyAddAssociationMixin<Inventory, InventoryId>
  public addInventories!: Sequelize.HasManyAddAssociationsMixin<Inventory, InventoryId>
  public createInventory!: Sequelize.HasManyCreateAssociationMixin<Inventory>
  public removeInventory!: Sequelize.HasManyRemoveAssociationMixin<Inventory, InventoryId>
  public removeInventories!: Sequelize.HasManyRemoveAssociationsMixin<Inventory, InventoryId>
  public hasInventory!: Sequelize.HasManyHasAssociationMixin<Inventory, InventoryId>
  public hasInventories!: Sequelize.HasManyHasAssociationsMixin<Inventory, InventoryId>
  public countInventories!: Sequelize.HasManyCountAssociationsMixin
  
  // Store hasMany Staff
  public readonly staffs?: Staff[]
  public getStaffs!: Sequelize.HasManyGetAssociationsMixin<Staff>
  public setStaffs!: Sequelize.HasManySetAssociationsMixin<Staff, StaffId>
  public addStaff!: Sequelize.HasManyAddAssociationMixin<Staff, StaffId>
  public addStaffs!: Sequelize.HasManyAddAssociationsMixin<Staff, StaffId>
  public createStaff!: Sequelize.HasManyCreateAssociationMixin<Staff>
  public removeStaff!: Sequelize.HasManyRemoveAssociationMixin<Staff, StaffId>
  public removeStaffs!: Sequelize.HasManyRemoveAssociationsMixin<Staff, StaffId>
  public hasStaff!: Sequelize.HasManyHasAssociationMixin<Staff, StaffId>
  public hasStaffs!: Sequelize.HasManyHasAssociationsMixin<Staff, StaffId>
  public countStaffs!: Sequelize.HasManyCountAssociationsMixin
  
  // Store hasMany Customer
  public readonly customers?: Customer[]
  public getCustomers!: Sequelize.HasManyGetAssociationsMixin<Customer>
  public setCustomers!: Sequelize.HasManySetAssociationsMixin<Customer, CustomerId>
  public addCustomer!: Sequelize.HasManyAddAssociationMixin<Customer, CustomerId>
  public addCustomers!: Sequelize.HasManyAddAssociationsMixin<Customer, CustomerId>
  public createCustomer!: Sequelize.HasManyCreateAssociationMixin<Customer>
  public removeCustomer!: Sequelize.HasManyRemoveAssociationMixin<Customer, CustomerId>
  public removeCustomers!: Sequelize.HasManyRemoveAssociationsMixin<Customer, CustomerId>
  public hasCustomer!: Sequelize.HasManyHasAssociationMixin<Customer, CustomerId>
  public hasCustomers!: Sequelize.HasManyHasAssociationsMixin<Customer, CustomerId>
  public countCustomers!: Sequelize.HasManyCountAssociationsMixin
  
  // Store belongsTo Staff (as Manager)
  public readonly manager?: Staff
  public getManager!: Sequelize.BelongsToGetAssociationMixin<Staff>
  public setManager!: Sequelize.BelongsToSetAssociationMixin<Staff, StaffId>
  public createManager!: Sequelize.BelongsToCreateAssociationMixin<Staff>
  
  // Store belongsTo Address
  public readonly address?: Address
  public getAddress!: Sequelize.BelongsToGetAssociationMixin<Address>
  public setAddress!: Sequelize.BelongsToSetAssociationMixin<Address, AddressId>
  public createAddress!: Sequelize.BelongsToCreateAssociationMixin<Address>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Store {
    Store.init({
      storeId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Store
  }
}
",
          "name": "Store.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Address, AddressId } from './Address'
import type { Payment, PaymentId } from './Payment'
import type { Rental, RentalId } from './Rental'
import type { Store, StoreId } from './Store'

export interface StaffAttributes {
  staffId: number
  firstName: string
  lastName: string
  picture?: Buffer
  email?: string
  active: boolean
  username: string
  password?: string
}

export type StaffPk = 'staffId'
export type StaffId = StaffAttributes[StaffPk]
export type StaffCreationAttributes = Optional<StaffAttributes, StaffPk>

export class Staff extends Model<StaffAttributes, StaffCreationAttributes> implements StaffAttributes {
  public readonly staffId!: number
  public firstName!: string
  public lastName!: string
  public picture?: Buffer
  public email?: string
  public active!: boolean
  public username!: string
  public password?: string

  // Staff belongsTo Store
  public readonly store?: Store
  public getStore!: Sequelize.BelongsToGetAssociationMixin<Store>
  public setStore!: Sequelize.BelongsToSetAssociationMixin<Store, StoreId>
  public createStore!: Sequelize.BelongsToCreateAssociationMixin<Store>
  
  // Staff hasMany Store (as ManagedStore)
  public readonly managedStores?: Store[]
  public getManagedStores!: Sequelize.HasManyGetAssociationsMixin<Store>
  public setManagedStores!: Sequelize.HasManySetAssociationsMixin<Store, StoreId>
  public addManagedStore!: Sequelize.HasManyAddAssociationMixin<Store, StoreId>
  public addManagedStores!: Sequelize.HasManyAddAssociationsMixin<Store, StoreId>
  public createManagedStore!: Sequelize.HasManyCreateAssociationMixin<Store>
  public removeManagedStore!: Sequelize.HasManyRemoveAssociationMixin<Store, StoreId>
  public removeManagedStores!: Sequelize.HasManyRemoveAssociationsMixin<Store, StoreId>
  public hasManagedStore!: Sequelize.HasManyHasAssociationMixin<Store, StoreId>
  public hasManagedStores!: Sequelize.HasManyHasAssociationsMixin<Store, StoreId>
  public countManagedStores!: Sequelize.HasManyCountAssociationsMixin
  
  // Staff belongsTo Address
  public readonly address?: Address
  public getAddress!: Sequelize.BelongsToGetAssociationMixin<Address>
  public setAddress!: Sequelize.BelongsToSetAssociationMixin<Address, AddressId>
  public createAddress!: Sequelize.BelongsToCreateAssociationMixin<Address>
  
  // Staff hasMany Rental
  public readonly rentals?: Rental[]
  public getRentals!: Sequelize.HasManyGetAssociationsMixin<Rental>
  public setRentals!: Sequelize.HasManySetAssociationsMixin<Rental, RentalId>
  public addRental!: Sequelize.HasManyAddAssociationMixin<Rental, RentalId>
  public addRentals!: Sequelize.HasManyAddAssociationsMixin<Rental, RentalId>
  public createRental!: Sequelize.HasManyCreateAssociationMixin<Rental>
  public removeRental!: Sequelize.HasManyRemoveAssociationMixin<Rental, RentalId>
  public removeRentals!: Sequelize.HasManyRemoveAssociationsMixin<Rental, RentalId>
  public hasRental!: Sequelize.HasManyHasAssociationMixin<Rental, RentalId>
  public hasRentals!: Sequelize.HasManyHasAssociationsMixin<Rental, RentalId>
  public countRentals!: Sequelize.HasManyCountAssociationsMixin
  
  // Staff hasMany Payment
  public readonly payments?: Payment[]
  public getPayments!: Sequelize.HasManyGetAssociationsMixin<Payment>
  public setPayments!: Sequelize.HasManySetAssociationsMixin<Payment, PaymentId>
  public addPayment!: Sequelize.HasManyAddAssociationMixin<Payment, PaymentId>
  public addPayments!: Sequelize.HasManyAddAssociationsMixin<Payment, PaymentId>
  public createPayment!: Sequelize.HasManyCreateAssociationMixin<Payment>
  public removePayment!: Sequelize.HasManyRemoveAssociationMixin<Payment, PaymentId>
  public removePayments!: Sequelize.HasManyRemoveAssociationsMixin<Payment, PaymentId>
  public hasPayment!: Sequelize.HasManyHasAssociationMixin<Payment, PaymentId>
  public hasPayments!: Sequelize.HasManyHasAssociationsMixin<Payment, PaymentId>
  public countPayments!: Sequelize.HasManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Staff {
    Staff.init({
      staffId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      firstName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      lastName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      picture: {
        type: DataTypes.BLOB
      },
      email: {
        type: DataTypes.STRING
      },
      active: {
        type: DataTypes.BOOLEAN,
        allowNull: false
      },
      username: {
        type: DataTypes.STRING,
        allowNull: false
      },
      password: {
        type: DataTypes.STRING
      }
    }, {
      sequelize
    })
    
    return Staff
  }
}
",
          "name": "Staff.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Address, AddressId } from './Address'
import type { Payment, PaymentId } from './Payment'
import type { Rental, RentalId } from './Rental'
import type { Store, StoreId } from './Store'

export interface CustomerAttributes {
  customerId: number
  firstName: string
  lastName: string
  email?: string
  active: boolean
}

export type CustomerPk = 'customerId'
export type CustomerId = CustomerAttributes[CustomerPk]
export type CustomerCreationAttributes = Optional<CustomerAttributes, CustomerPk>

export class Customer extends Model<CustomerAttributes, CustomerCreationAttributes> implements CustomerAttributes {
  public readonly customerId!: number
  public firstName!: string
  public lastName!: string
  public email?: string
  public active!: boolean

  // Customer belongsTo Store
  public readonly store?: Store
  public getStore!: Sequelize.BelongsToGetAssociationMixin<Store>
  public setStore!: Sequelize.BelongsToSetAssociationMixin<Store, StoreId>
  public createStore!: Sequelize.BelongsToCreateAssociationMixin<Store>
  
  // Customer belongsTo Address
  public readonly address?: Address
  public getAddress!: Sequelize.BelongsToGetAssociationMixin<Address>
  public setAddress!: Sequelize.BelongsToSetAssociationMixin<Address, AddressId>
  public createAddress!: Sequelize.BelongsToCreateAssociationMixin<Address>
  
  // Customer hasMany Rental
  public readonly rentals?: Rental[]
  public getRentals!: Sequelize.HasManyGetAssociationsMixin<Rental>
  public setRentals!: Sequelize.HasManySetAssociationsMixin<Rental, RentalId>
  public addRental!: Sequelize.HasManyAddAssociationMixin<Rental, RentalId>
  public addRentals!: Sequelize.HasManyAddAssociationsMixin<Rental, RentalId>
  public createRental!: Sequelize.HasManyCreateAssociationMixin<Rental>
  public removeRental!: Sequelize.HasManyRemoveAssociationMixin<Rental, RentalId>
  public removeRentals!: Sequelize.HasManyRemoveAssociationsMixin<Rental, RentalId>
  public hasRental!: Sequelize.HasManyHasAssociationMixin<Rental, RentalId>
  public hasRentals!: Sequelize.HasManyHasAssociationsMixin<Rental, RentalId>
  public countRentals!: Sequelize.HasManyCountAssociationsMixin
  
  // Customer hasMany Payment
  public readonly payments?: Payment[]
  public getPayments!: Sequelize.HasManyGetAssociationsMixin<Payment>
  public setPayments!: Sequelize.HasManySetAssociationsMixin<Payment, PaymentId>
  public addPayment!: Sequelize.HasManyAddAssociationMixin<Payment, PaymentId>
  public addPayments!: Sequelize.HasManyAddAssociationsMixin<Payment, PaymentId>
  public createPayment!: Sequelize.HasManyCreateAssociationMixin<Payment>
  public removePayment!: Sequelize.HasManyRemoveAssociationMixin<Payment, PaymentId>
  public removePayments!: Sequelize.HasManyRemoveAssociationsMixin<Payment, PaymentId>
  public hasPayment!: Sequelize.HasManyHasAssociationMixin<Payment, PaymentId>
  public hasPayments!: Sequelize.HasManyHasAssociationsMixin<Payment, PaymentId>
  public countPayments!: Sequelize.HasManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Customer {
    Customer.init({
      customerId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      firstName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      lastName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      email: {
        type: DataTypes.STRING
      },
      active: {
        type: DataTypes.BOOLEAN,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Customer
  }
}
",
          "name": "Customer.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { City, CityId } from './City'
import type { Customer, CustomerCreationAttributes, CustomerId } from './Customer'
import type { Staff, StaffCreationAttributes, StaffId } from './Staff'
import type { Store, StoreCreationAttributes, StoreId } from './Store'

export interface AddressAttributes {
  addressId: number
  address: string
  address2: string
  postalCode?: string
  phone: string
}

export type AddressPk = 'addressId'
export type AddressId = AddressAttributes[AddressPk]
export type AddressCreationAttributes = Optional<AddressAttributes, AddressPk>

export class Address extends Model<AddressAttributes, AddressCreationAttributes> implements AddressAttributes {
  public readonly addressId!: number
  public address!: string
  public address2!: string
  public postalCode?: string
  public phone!: string

  // Address belongsTo City
  public readonly city?: City
  public getCity!: Sequelize.BelongsToGetAssociationMixin<City>
  public setCity!: Sequelize.BelongsToSetAssociationMixin<City, CityId>
  public createCity!: Sequelize.BelongsToCreateAssociationMixin<City>
  
  // Address hasOne Customer
  public readonly customer?: Customer
  public getCustomer!: Sequelize.HasOneGetAssociationMixin<Customer>
  public setCustomer!: Sequelize.HasOneSetAssociationMixin<Customer, CustomerId>
  public createCustomer!: Sequelize.HasOneCreateAssociationMixin<CustomerCreationAttributes>
  
  // Address hasOne Staff
  public readonly staff?: Staff
  public getStaff!: Sequelize.HasOneGetAssociationMixin<Staff>
  public setStaff!: Sequelize.HasOneSetAssociationMixin<Staff, StaffId>
  public createStaff!: Sequelize.HasOneCreateAssociationMixin<StaffCreationAttributes>
  
  // Address hasOne Store
  public readonly store?: Store
  public getStore!: Sequelize.HasOneGetAssociationMixin<Store>
  public setStore!: Sequelize.HasOneSetAssociationMixin<Store, StoreId>
  public createStore!: Sequelize.HasOneCreateAssociationMixin<StoreCreationAttributes>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Address {
    Address.init({
      addressId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      address: {
        type: DataTypes.STRING,
        allowNull: false
      },
      address2: {
        type: DataTypes.STRING,
        allowNull: false
      },
      postalCode: {
        type: DataTypes.STRING
      },
      phone: {
        type: DataTypes.STRING,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Address
  }
}
",
          "name": "Address.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Customer, CustomerId } from './Customer'
import type { Inventory, InventoryId } from './Inventory'
import type { Payment, PaymentId } from './Payment'
import type { Staff, StaffId } from './Staff'

export interface RentalAttributes {
  rentalId: number
  rentalDate: string
  returnDate?: string
}

export type RentalPk = 'rentalId'
export type RentalId = RentalAttributes[RentalPk]
export type RentalCreationAttributes = Optional<RentalAttributes, RentalPk>

export class Rental extends Model<RentalAttributes, RentalCreationAttributes> implements RentalAttributes {
  public readonly rentalId!: number
  public rentalDate!: string
  public returnDate?: string

  // Rental belongsTo Inventory
  public readonly inventory?: Inventory
  public getInventory!: Sequelize.BelongsToGetAssociationMixin<Inventory>
  public setInventory!: Sequelize.BelongsToSetAssociationMixin<Inventory, InventoryId>
  public createInventory!: Sequelize.BelongsToCreateAssociationMixin<Inventory>
  
  // Rental belongsTo Customer
  public readonly customer?: Customer
  public getCustomer!: Sequelize.BelongsToGetAssociationMixin<Customer>
  public setCustomer!: Sequelize.BelongsToSetAssociationMixin<Customer, CustomerId>
  public createCustomer!: Sequelize.BelongsToCreateAssociationMixin<Customer>
  
  // Rental belongsTo Staff
  public readonly staff?: Staff
  public getStaff!: Sequelize.BelongsToGetAssociationMixin<Staff>
  public setStaff!: Sequelize.BelongsToSetAssociationMixin<Staff, StaffId>
  public createStaff!: Sequelize.BelongsToCreateAssociationMixin<Staff>
  
  // Rental hasMany Payment
  public readonly payments?: Payment[]
  public getPayments!: Sequelize.HasManyGetAssociationsMixin<Payment>
  public setPayments!: Sequelize.HasManySetAssociationsMixin<Payment, PaymentId>
  public addPayment!: Sequelize.HasManyAddAssociationMixin<Payment, PaymentId>
  public addPayments!: Sequelize.HasManyAddAssociationsMixin<Payment, PaymentId>
  public createPayment!: Sequelize.HasManyCreateAssociationMixin<Payment>
  public removePayment!: Sequelize.HasManyRemoveAssociationMixin<Payment, PaymentId>
  public removePayments!: Sequelize.HasManyRemoveAssociationsMixin<Payment, PaymentId>
  public hasPayment!: Sequelize.HasManyHasAssociationMixin<Payment, PaymentId>
  public hasPayments!: Sequelize.HasManyHasAssociationsMixin<Payment, PaymentId>
  public countPayments!: Sequelize.HasManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Rental {
    Rental.init({
      rentalId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      rentalDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      },
      returnDate: {
        type: DataTypes.STRING
      }
    }, {
      sequelize
    })
    
    return Rental
  }
}
",
          "name": "Rental.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Customer, CustomerId } from './Customer'
import type { Rental, RentalId } from './Rental'
import type { Staff, StaffId } from './Staff'

export interface PaymentAttributes {
  paymentId: number
  amount: number
  paymentDate: string
}

export type PaymentPk = 'paymentId'
export type PaymentId = PaymentAttributes[PaymentPk]
export type PaymentCreationAttributes = Optional<PaymentAttributes, PaymentPk>

export class Payment extends Model<PaymentAttributes, PaymentCreationAttributes> implements PaymentAttributes {
  public readonly paymentId!: number
  public amount!: number
  public paymentDate!: string

  // Payment belongsTo Customer
  public readonly customer?: Customer
  public getCustomer!: Sequelize.BelongsToGetAssociationMixin<Customer>
  public setCustomer!: Sequelize.BelongsToSetAssociationMixin<Customer, CustomerId>
  public createCustomer!: Sequelize.BelongsToCreateAssociationMixin<Customer>
  
  // Payment belongsTo Staff
  public readonly staff?: Staff
  public getStaff!: Sequelize.BelongsToGetAssociationMixin<Staff>
  public setStaff!: Sequelize.BelongsToSetAssociationMixin<Staff, StaffId>
  public createStaff!: Sequelize.BelongsToCreateAssociationMixin<Staff>
  
  // Payment belongsTo Rental
  public readonly rental?: Rental
  public getRental!: Sequelize.BelongsToGetAssociationMixin<Rental>
  public setRental!: Sequelize.BelongsToSetAssociationMixin<Rental, RentalId>
  public createRental!: Sequelize.BelongsToCreateAssociationMixin<Rental>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Payment {
    Payment.init({
      paymentId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      amount: {
        type: DataTypes.DECIMAL,
        allowNull: false
      },
      paymentDate: {
        type: DataTypes.DATE,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Payment
  }
}
",
          "name": "Payment.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Address, AddressId } from './Address'
import type { Country, CountryId } from './Country'

export interface CityAttributes {
  cityId: number
  city: string
}

export type CityPk = 'cityId'
export type CityId = CityAttributes[CityPk]
export type CityCreationAttributes = Optional<CityAttributes, CityPk>

export class City extends Model<CityAttributes, CityCreationAttributes> implements CityAttributes {
  public readonly cityId!: number
  public city!: string

  // City belongsTo Country
  public readonly country?: Country
  public getCountry!: Sequelize.BelongsToGetAssociationMixin<Country>
  public setCountry!: Sequelize.BelongsToSetAssociationMixin<Country, CountryId>
  public createCountry!: Sequelize.BelongsToCreateAssociationMixin<Country>
  
  // City hasMany Address
  public readonly addresses?: Address[]
  public getAddresses!: Sequelize.HasManyGetAssociationsMixin<Address>
  public setAddresses!: Sequelize.HasManySetAssociationsMixin<Address, AddressId>
  public addAddress!: Sequelize.HasManyAddAssociationMixin<Address, AddressId>
  public addAddresses!: Sequelize.HasManyAddAssociationsMixin<Address, AddressId>
  public createAddress!: Sequelize.HasManyCreateAssociationMixin<Address>
  public removeAddress!: Sequelize.HasManyRemoveAssociationMixin<Address, AddressId>
  public removeAddresses!: Sequelize.HasManyRemoveAssociationsMixin<Address, AddressId>
  public hasAddress!: Sequelize.HasManyHasAssociationMixin<Address, AddressId>
  public hasAddresses!: Sequelize.HasManyHasAssociationsMixin<Address, AddressId>
  public countAddresses!: Sequelize.HasManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof City {
    City.init({
      cityId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      city: {
        type: DataTypes.STRING,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return City
  }
}
",
          "name": "City.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { City, CityId } from './City'

export interface CountryAttributes {
  countryId: number
  country: string
}

export type CountryPk = 'countryId'
export type CountryId = CountryAttributes[CountryPk]
export type CountryCreationAttributes = Optional<CountryAttributes, CountryPk>

export class Country extends Model<CountryAttributes, CountryCreationAttributes> implements CountryAttributes {
  public readonly countryId!: number
  public country!: string

  // Country hasMany City
  public readonly cities?: City[]
  public getCities!: Sequelize.HasManyGetAssociationsMixin<City>
  public setCities!: Sequelize.HasManySetAssociationsMixin<City, CityId>
  public addCity!: Sequelize.HasManyAddAssociationMixin<City, CityId>
  public addCities!: Sequelize.HasManyAddAssociationsMixin<City, CityId>
  public createCity!: Sequelize.HasManyCreateAssociationMixin<City>
  public removeCity!: Sequelize.HasManyRemoveAssociationMixin<City, CityId>
  public removeCities!: Sequelize.HasManyRemoveAssociationsMixin<City, CityId>
  public hasCity!: Sequelize.HasManyHasAssociationMixin<City, CityId>
  public hasCities!: Sequelize.HasManyHasAssociationsMixin<City, CityId>
  public countCities!: Sequelize.HasManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Country {
    Country.init({
      countryId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      country: {
        type: DataTypes.STRING,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Country
  }
}
",
          "name": "Country.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Actor, ActorId } from './Actor'
import type { Film, FilmId } from './Film'

export interface FilmActorAttributes {
  filmActorId: number
}

export type FilmActorPk = 'filmActorId'
export type FilmActorId = FilmActorAttributes[FilmActorPk]
export type FilmActorCreationAttributes = Optional<FilmActorAttributes, FilmActorPk>

export class FilmActor extends Model<FilmActorAttributes, FilmActorCreationAttributes> implements FilmActorAttributes {
  public readonly filmActorId!: number

  // FilmActor belongsTo Film
  public readonly film?: Film
  public getFilm!: Sequelize.BelongsToGetAssociationMixin<Film>
  public setFilm!: Sequelize.BelongsToSetAssociationMixin<Film, FilmId>
  public createFilm!: Sequelize.BelongsToCreateAssociationMixin<Film>
  
  // FilmActor belongsTo Actor
  public readonly actor?: Actor
  public getActor!: Sequelize.BelongsToGetAssociationMixin<Actor>
  public setActor!: Sequelize.BelongsToSetAssociationMixin<Actor, ActorId>
  public createActor!: Sequelize.BelongsToCreateAssociationMixin<Actor>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof FilmActor {
    FilmActor.init({
      filmActorId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return FilmActor
  }
}
",
          "name": "FilmActor.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Category, CategoryId } from './Category'
import type { Film, FilmId } from './Film'

export interface FilmCategoryAttributes {
  filmCategoryId: number
}

export type FilmCategoryPk = 'filmCategoryId'
export type FilmCategoryId = FilmCategoryAttributes[FilmCategoryPk]
export type FilmCategoryCreationAttributes = Optional<FilmCategoryAttributes, FilmCategoryPk>

export class FilmCategory extends Model<FilmCategoryAttributes, FilmCategoryCreationAttributes> implements FilmCategoryAttributes {
  public readonly filmCategoryId!: number

  // FilmCategory belongsTo Film
  public readonly film?: Film
  public getFilm!: Sequelize.BelongsToGetAssociationMixin<Film>
  public setFilm!: Sequelize.BelongsToSetAssociationMixin<Film, FilmId>
  public createFilm!: Sequelize.BelongsToCreateAssociationMixin<Film>
  
  // FilmCategory belongsTo Category
  public readonly category?: Category
  public getCategory!: Sequelize.BelongsToGetAssociationMixin<Category>
  public setCategory!: Sequelize.BelongsToSetAssociationMixin<Category, CategoryId>
  public createCategory!: Sequelize.BelongsToCreateAssociationMixin<Category>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof FilmCategory {
    FilmCategory.init({
      filmCategoryId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return FilmCategory
  }
}
",
          "name": "FilmCategory.ts",
          "type": "FILE",
        },
      ],
      "name": "models",
      "type": "DIRECTORY",
    },
    Object {
      "content": "node_modules/
dist
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.tmp
",
      "name": ".gitignore",
      "type": "FILE",
    },
    Object {
      "content": "import { Sequelize } from 'sequelize'

const db: Sequelize = new Sequelize({
  dialect: 'postgres',
  database: process.env.POSTGRES_DB_NAME || 'sakila',
  username: process.env.POSTGRES_DB_USERNAME || 'postgres',
  password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
  host: process.env.POSTGRES_DB_HOST || 'localhost',
  port: parseInt(process.env.POSTGRES_DB_PORT || '5432'),
  define: {
    underscored: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at'
  }
})

export default db
",
      "name": "db.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
  \\"name\\": \\"sakila\\",
  \\"version\\": \\"0.0.1\\",
  \\"description\\": \\"\\",
  \\"main\\": \\"server.ts\\",
  \\"scripts\\": {
    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\",
    \\"build\\": \\"tsc\\",
    \\"start\\": \\"node ./dist/server.js\\"
  },
  \\"author\\": \\"\\",
  \\"license\\": \\"ISC\\",
  \\"dependencies\\": {
    \\"pg\\": \\"^8.5.1\\",
    \\"pg-hstore\\": \\"^2.3.3\\",
    \\"sequelize\\": \\"^6.3.5\\"
  },
  \\"devDependencies\\": {
    \\"@types/node\\": \\"^14.14.20\\",
    \\"@types/validator\\": \\"^13.1.3\\",
    \\"typescript\\": \\"^4.1.3\\"
  }
}

",
      "name": "package.json",
      "type": "FILE",
    },
    Object {
      "content": "import db from './db'
import { initModels } from './models'

initModels(db)

db.sync({ force: true })
",
      "name": "server.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
    \\"compilerOptions\\": {
      \\"target\\": \\"ES2020\\",
      \\"module\\": \\"commonjs\\",
      \\"lib\\": [\\"ES2020\\"],
      \\"outDir\\": \\"dist\\",
      \\"strict\\": true,
      \\"moduleResolution\\": \\"node\\",
      \\"esModuleInterop\\": true,
      \\"forceConsistentCasingInFileNames\\": true
    }
  }
",
      "name": "tsconfig.json",
      "type": "FILE",
    },
  ],
  "name": "sakila",
  "type": "DIRECTORY",
}
`;

exports[`Sequelize Framework schema generates correct code for sakila 2`] = `
Object {
  "files": Array [
    Object {
      "files": Array [
        Object {
          "content": "import type { Sequelize, Model } from 'sequelize'
import { Employee } from './Employee'
import type { EmployeeAttributes, EmployeeCreationAttributes } from './Employee'
import { Department } from './Department'
import type { DepartmentAttributes, DepartmentCreationAttributes } from './Department'
import { DeptEmp } from './DeptEmp'
import type { DeptEmpAttributes, DeptEmpCreationAttributes } from './DeptEmp'
import { DeptManager } from './DeptManager'
import type { DeptManagerAttributes, DeptManagerCreationAttributes } from './DeptManager'
import { Title } from './Title'
import type { TitleAttributes, TitleCreationAttributes } from './Title'
import { Salary } from './Salary'
import type { SalaryAttributes, SalaryCreationAttributes } from './Salary'

export {
  Employee,
  Department,
  DeptEmp,
  DeptManager,
  Title,
  Salary
}

export type {
  EmployeeAttributes,
  EmployeeCreationAttributes,
  DepartmentAttributes,
  DepartmentCreationAttributes,
  DeptEmpAttributes,
  DeptEmpCreationAttributes,
  DeptManagerAttributes,
  DeptManagerCreationAttributes,
  TitleAttributes,
  TitleCreationAttributes,
  SalaryAttributes,
  SalaryCreationAttributes
}

export function initModels(sequelize: Sequelize) {
  Employee.initModel(sequelize)
  Department.initModel(sequelize)
  DeptEmp.initModel(sequelize)
  DeptManager.initModel(sequelize)
  Title.initModel(sequelize)
  Salary.initModel(sequelize)

  Employee.hasMany(Salary, {
    foreignKey: 'emp_no_id'
  })
  Employee.hasMany(Title, {
    foreignKey: 'emp_no_id'
  })
  Employee.belongsToMany(Department, {
    as: 'employingDepartments',
    through: DeptEmp,
    foreignKey: 'emp_no_id',
    otherKey: 'dept_no_id',
    onDelete: 'CASCADE'
  })
  Employee.belongsToMany(Department, {
    as: 'managedDepartments',
    through: DeptManager,
    foreignKey: 'emp_no_id',
    otherKey: 'dept_no_id',
    onDelete: 'CASCADE'
  })
  Department.belongsToMany(Employee, {
    as: 'employees',
    through: DeptEmp,
    foreignKey: 'departments_id',
    otherKey: 'employee_id',
    onDelete: 'CASCADE'
  })
  Department.belongsToMany(Employee, {
    as: 'managers',
    through: DeptManager,
    foreignKey: 'departments_id',
    otherKey: 'manager_id',
    onDelete: 'CASCADE'
  })
  Department.hasMany(DeptEmp, {
    foreignKey: 'dept_no_id'
  })
  Department.hasMany(DeptManager, {
    foreignKey: 'dept_no_id'
  })
  DeptEmp.belongsTo(Employee, {
    foreignKey: 'emp_no_id'
  })
  DeptEmp.belongsTo(Department, {
    foreignKey: 'dept_no_id'
  })
  DeptManager.belongsTo(Employee, {
    foreignKey: 'emp_no_id'
  })
  DeptManager.belongsTo(Department, {
    foreignKey: 'dept_no_id'
  })
  Title.belongsTo(Employee, {
    foreignKey: 'emp_no_id'
  })
  Salary.belongsTo(Employee, {
    foreignKey: 'emp_no_id'
  })

  return {
    Employee,
    Department,
    DeptEmp,
    DeptManager,
    Title,
    Salary
  }
}
",
          "name": "index.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Department, DepartmentId } from './Department'
import type { Salary, SalaryId } from './Salary'
import type { Title, TitleId } from './Title'

export interface EmployeeAttributes {
  empNo: number
  birthDate: string
  firstName: string
  lastName: string
  gender: 'M' | 'F' | 'O'
  hireDate: string
}

export type EmployeePk = 'empNo'
export type EmployeeId = EmployeeAttributes[EmployeePk]
export type EmployeeCreationAttributes = Optional<EmployeeAttributes, EmployeePk>

export class Employee extends Model<EmployeeAttributes, EmployeeCreationAttributes> implements EmployeeAttributes {
  public readonly empNo!: number
  public birthDate!: string
  public firstName!: string
  public lastName!: string
  public gender!: 'M' | 'F' | 'O'
  public hireDate!: string

  // Employee hasMany Salary
  public readonly salaries?: Salary[]
  public getSalaries!: Sequelize.HasManyGetAssociationsMixin<Salary>
  public setSalaries!: Sequelize.HasManySetAssociationsMixin<Salary, SalaryId>
  public addSalary!: Sequelize.HasManyAddAssociationMixin<Salary, SalaryId>
  public addSalaries!: Sequelize.HasManyAddAssociationsMixin<Salary, SalaryId>
  public createSalary!: Sequelize.HasManyCreateAssociationMixin<Salary>
  public removeSalary!: Sequelize.HasManyRemoveAssociationMixin<Salary, SalaryId>
  public removeSalaries!: Sequelize.HasManyRemoveAssociationsMixin<Salary, SalaryId>
  public hasSalary!: Sequelize.HasManyHasAssociationMixin<Salary, SalaryId>
  public hasSalaries!: Sequelize.HasManyHasAssociationsMixin<Salary, SalaryId>
  public countSalaries!: Sequelize.HasManyCountAssociationsMixin
  
  // Employee hasMany Title
  public readonly titles?: Title[]
  public getTitles!: Sequelize.HasManyGetAssociationsMixin<Title>
  public setTitles!: Sequelize.HasManySetAssociationsMixin<Title, TitleId>
  public addTitle!: Sequelize.HasManyAddAssociationMixin<Title, TitleId>
  public addTitles!: Sequelize.HasManyAddAssociationsMixin<Title, TitleId>
  public createTitle!: Sequelize.HasManyCreateAssociationMixin<Title>
  public removeTitle!: Sequelize.HasManyRemoveAssociationMixin<Title, TitleId>
  public removeTitles!: Sequelize.HasManyRemoveAssociationsMixin<Title, TitleId>
  public hasTitle!: Sequelize.HasManyHasAssociationMixin<Title, TitleId>
  public hasTitles!: Sequelize.HasManyHasAssociationsMixin<Title, TitleId>
  public countTitles!: Sequelize.HasManyCountAssociationsMixin
  
  // Employee belongsToMany Department (as EmployingDepartment)
  public readonly employingDepartments?: Department[]
  public getEmployingDepartments!: Sequelize.BelongsToManyGetAssociationsMixin<Department>
  public setEmployingDepartments!: Sequelize.BelongsToManySetAssociationsMixin<Department, DepartmentId>
  public addEmployingDepartment!: Sequelize.BelongsToManyAddAssociationMixin<Department, DepartmentId>
  public addEmployingDepartments!: Sequelize.BelongsToManyAddAssociationsMixin<Department, DepartmentId>
  public createEmployingDepartment!: Sequelize.BelongsToManyCreateAssociationMixin<Department>
  public removeEmployingDepartment!: Sequelize.BelongsToManyRemoveAssociationMixin<Department, DepartmentId>
  public removeEmployingDepartments!: Sequelize.BelongsToManyRemoveAssociationsMixin<Department, DepartmentId>
  public hasEmployingDepartment!: Sequelize.BelongsToManyHasAssociationMixin<Department, DepartmentId>
  public hasEmployingDepartments!: Sequelize.BelongsToManyHasAssociationsMixin<Department, DepartmentId>
  public countEmployingDepartments!: Sequelize.BelongsToManyCountAssociationsMixin
  
  // Employee belongsToMany Department (as ManagedDepartment)
  public readonly managedDepartments?: Department[]
  public getManagedDepartments!: Sequelize.BelongsToManyGetAssociationsMixin<Department>
  public setManagedDepartments!: Sequelize.BelongsToManySetAssociationsMixin<Department, DepartmentId>
  public addManagedDepartment!: Sequelize.BelongsToManyAddAssociationMixin<Department, DepartmentId>
  public addManagedDepartments!: Sequelize.BelongsToManyAddAssociationsMixin<Department, DepartmentId>
  public createManagedDepartment!: Sequelize.BelongsToManyCreateAssociationMixin<Department>
  public removeManagedDepartment!: Sequelize.BelongsToManyRemoveAssociationMixin<Department, DepartmentId>
  public removeManagedDepartments!: Sequelize.BelongsToManyRemoveAssociationsMixin<Department, DepartmentId>
  public hasManagedDepartment!: Sequelize.BelongsToManyHasAssociationMixin<Department, DepartmentId>
  public hasManagedDepartments!: Sequelize.BelongsToManyHasAssociationsMixin<Department, DepartmentId>
  public countManagedDepartments!: Sequelize.BelongsToManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Employee {
    Employee.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      birthDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      },
      firstName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      lastName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      gender: {
        type: DataTypes.ENUM('M', 'F', 'O'),
        allowNull: false
      },
      hireDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Employee
  }
}
",
          "name": "Employee.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { DeptEmp, DeptEmpId } from './DeptEmp'
import type { DeptManager, DeptManagerId } from './DeptManager'
import type { Employee, EmployeeId } from './Employee'

export interface DepartmentAttributes {
  deptNo: string
  deptName: string
}

export type DepartmentPk = 'deptNo'
export type DepartmentId = DepartmentAttributes[DepartmentPk]
export type DepartmentCreationAttributes = Optional<DepartmentAttributes, DepartmentPk>

export class Department extends Model<DepartmentAttributes, DepartmentCreationAttributes> implements DepartmentAttributes {
  public readonly deptNo!: string
  public deptName!: string

  // Department belongsToMany Employee (as Employee)
  public readonly employees?: Employee[]
  public getEmployees!: Sequelize.BelongsToManyGetAssociationsMixin<Employee>
  public setEmployees!: Sequelize.BelongsToManySetAssociationsMixin<Employee, EmployeeId>
  public addEmployee!: Sequelize.BelongsToManyAddAssociationMixin<Employee, EmployeeId>
  public addEmployees!: Sequelize.BelongsToManyAddAssociationsMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToManyCreateAssociationMixin<Employee>
  public removeEmployee!: Sequelize.BelongsToManyRemoveAssociationMixin<Employee, EmployeeId>
  public removeEmployees!: Sequelize.BelongsToManyRemoveAssociationsMixin<Employee, EmployeeId>
  public hasEmployee!: Sequelize.BelongsToManyHasAssociationMixin<Employee, EmployeeId>
  public hasEmployees!: Sequelize.BelongsToManyHasAssociationsMixin<Employee, EmployeeId>
  public countEmployees!: Sequelize.BelongsToManyCountAssociationsMixin
  
  // Department belongsToMany Employee (as Manager)
  public readonly managers?: Employee[]
  public getManagers!: Sequelize.BelongsToManyGetAssociationsMixin<Employee>
  public setManagers!: Sequelize.BelongsToManySetAssociationsMixin<Employee, EmployeeId>
  public addManager!: Sequelize.BelongsToManyAddAssociationMixin<Employee, EmployeeId>
  public addManagers!: Sequelize.BelongsToManyAddAssociationsMixin<Employee, EmployeeId>
  public createManager!: Sequelize.BelongsToManyCreateAssociationMixin<Employee>
  public removeManager!: Sequelize.BelongsToManyRemoveAssociationMixin<Employee, EmployeeId>
  public removeManagers!: Sequelize.BelongsToManyRemoveAssociationsMixin<Employee, EmployeeId>
  public hasManager!: Sequelize.BelongsToManyHasAssociationMixin<Employee, EmployeeId>
  public hasManagers!: Sequelize.BelongsToManyHasAssociationsMixin<Employee, EmployeeId>
  public countManagers!: Sequelize.BelongsToManyCountAssociationsMixin
  
  // Department hasMany DeptEmp
  public readonly deptEmps?: DeptEmp[]
  public getDeptEmps!: Sequelize.HasManyGetAssociationsMixin<DeptEmp>
  public setDeptEmps!: Sequelize.HasManySetAssociationsMixin<DeptEmp, DeptEmpId>
  public addDeptEmp!: Sequelize.HasManyAddAssociationMixin<DeptEmp, DeptEmpId>
  public addDeptEmps!: Sequelize.HasManyAddAssociationsMixin<DeptEmp, DeptEmpId>
  public createDeptEmp!: Sequelize.HasManyCreateAssociationMixin<DeptEmp>
  public removeDeptEmp!: Sequelize.HasManyRemoveAssociationMixin<DeptEmp, DeptEmpId>
  public removeDeptEmps!: Sequelize.HasManyRemoveAssociationsMixin<DeptEmp, DeptEmpId>
  public hasDeptEmp!: Sequelize.HasManyHasAssociationMixin<DeptEmp, DeptEmpId>
  public hasDeptEmps!: Sequelize.HasManyHasAssociationsMixin<DeptEmp, DeptEmpId>
  public countDeptEmps!: Sequelize.HasManyCountAssociationsMixin
  
  // Department hasMany DeptManager
  public readonly deptManagers?: DeptManager[]
  public getDeptManagers!: Sequelize.HasManyGetAssociationsMixin<DeptManager>
  public setDeptManagers!: Sequelize.HasManySetAssociationsMixin<DeptManager, DeptManagerId>
  public addDeptManager!: Sequelize.HasManyAddAssociationMixin<DeptManager, DeptManagerId>
  public addDeptManagers!: Sequelize.HasManyAddAssociationsMixin<DeptManager, DeptManagerId>
  public createDeptManager!: Sequelize.HasManyCreateAssociationMixin<DeptManager>
  public removeDeptManager!: Sequelize.HasManyRemoveAssociationMixin<DeptManager, DeptManagerId>
  public removeDeptManagers!: Sequelize.HasManyRemoveAssociationsMixin<DeptManager, DeptManagerId>
  public hasDeptManager!: Sequelize.HasManyHasAssociationMixin<DeptManager, DeptManagerId>
  public hasDeptManagers!: Sequelize.HasManyHasAssociationsMixin<DeptManager, DeptManagerId>
  public countDeptManagers!: Sequelize.HasManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Department {
    Department.init({
      deptNo: {
        type: DataTypes.STRING,
        primaryKey: true,
        allowNull: false
      },
      deptName: {
        type: DataTypes.STRING,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return Department
  }
}
",
          "name": "Department.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Department, DepartmentId } from './Department'
import type { Employee, EmployeeId } from './Employee'

export interface DeptEmpAttributes {
  empNo: number
  deptNo: string
  fromDate: string
  toDate: string
}

export type DeptEmpPk = 'empNo' | 'deptNo'
export type DeptEmpId = DeptEmpAttributes[DeptEmpPk]
export type DeptEmpCreationAttributes = Optional<DeptEmpAttributes, DeptEmpPk>

export class DeptEmp extends Model<DeptEmpAttributes, DeptEmpCreationAttributes> implements DeptEmpAttributes {
  public readonly empNo!: number
  public readonly deptNo!: string
  public fromDate!: string
  public toDate!: string

  // DeptEmp belongsTo Employee
  public readonly employee?: Employee
  public getEmployee!: Sequelize.BelongsToGetAssociationMixin<Employee>
  public setEmployee!: Sequelize.BelongsToSetAssociationMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToCreateAssociationMixin<Employee>
  
  // DeptEmp belongsTo Department
  public readonly department?: Department
  public getDepartment!: Sequelize.BelongsToGetAssociationMixin<Department>
  public setDepartment!: Sequelize.BelongsToSetAssociationMixin<Department, DepartmentId>
  public createDepartment!: Sequelize.BelongsToCreateAssociationMixin<Department>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof DeptEmp {
    DeptEmp.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        allowNull: false
      },
      deptNo: {
        type: DataTypes.STRING,
        primaryKey: true,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return DeptEmp
  }
}
",
          "name": "DeptEmp.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Department, DepartmentId } from './Department'
import type { Employee, EmployeeId } from './Employee'

export interface DeptManagerAttributes {
  empNo: number
  deptNo: string
  fromDate: string
  toDate: string
}

export type DeptManagerPk = 'empNo' | 'deptNo'
export type DeptManagerId = DeptManagerAttributes[DeptManagerPk]
export type DeptManagerCreationAttributes = Optional<DeptManagerAttributes, DeptManagerPk>

export class DeptManager extends Model<DeptManagerAttributes, DeptManagerCreationAttributes> implements DeptManagerAttributes {
  public readonly empNo!: number
  public readonly deptNo!: string
  public fromDate!: string
  public toDate!: string

  // DeptManager belongsTo Employee
  public readonly employee?: Employee
  public getEmployee!: Sequelize.BelongsToGetAssociationMixin<Employee>
  public setEmployee!: Sequelize.BelongsToSetAssociationMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToCreateAssociationMixin<Employee>
  
  // DeptManager belongsTo Department
  public readonly department?: Department
  public getDepartment!: Sequelize.BelongsToGetAssociationMixin<Department>
  public setDepartment!: Sequelize.BelongsToSetAssociationMixin<Department, DepartmentId>
  public createDepartment!: Sequelize.BelongsToCreateAssociationMixin<Department>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof DeptManager {
    DeptManager.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        allowNull: false
      },
      deptNo: {
        type: DataTypes.STRING,
        primaryKey: true,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY,
        allowNull: false
      }
    }, {
      sequelize
    })
    
    return DeptManager
  }
}
",
          "name": "DeptManager.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Employee, EmployeeId } from './Employee'

export interface TitleAttributes {
  empNo: number
  title: string
  fromDate: string
  toDate?: string
}

export type TitlePk = 'empNo' | 'fromDate'
export type TitleId = TitleAttributes[TitlePk]
export type TitleCreationAttributes = Optional<TitleAttributes, TitlePk>

export class Title extends Model<TitleAttributes, TitleCreationAttributes> implements TitleAttributes {
  public readonly empNo!: number
  public title!: string
  public readonly fromDate!: string
  public toDate?: string

  // Title belongsTo Employee
  public readonly employee?: Employee
  public getEmployee!: Sequelize.BelongsToGetAssociationMixin<Employee>
  public setEmployee!: Sequelize.BelongsToSetAssociationMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToCreateAssociationMixin<Employee>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Title {
    Title.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      title: {
        type: DataTypes.STRING,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        primaryKey: true,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY
      }
    }, {
      sequelize
    })
    
    return Title
  }
}
",
          "name": "Title.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Employee, EmployeeId } from './Employee'

export interface SalaryAttributes {
  empNo: number
  salary: number
  fromDate: string
  toDate?: string
}

export type SalaryPk = 'empNo' | 'fromDate'
export type SalaryId = SalaryAttributes[SalaryPk]
export type SalaryCreationAttributes = Optional<SalaryAttributes, SalaryPk>

export class Salary extends Model<SalaryAttributes, SalaryCreationAttributes> implements SalaryAttributes {
  public readonly empNo!: number
  public salary!: number
  public readonly fromDate!: string
  public toDate?: string

  // Salary belongsTo Employee
  public readonly employee?: Employee
  public getEmployee!: Sequelize.BelongsToGetAssociationMixin<Employee>
  public setEmployee!: Sequelize.BelongsToSetAssociationMixin<Employee, EmployeeId>
  public createEmployee!: Sequelize.BelongsToCreateAssociationMixin<Employee>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Salary {
    Salary.init({
      empNo: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
        allowNull: false
      },
      salary: {
        type: DataTypes.INTEGER,
        allowNull: false
      },
      fromDate: {
        type: DataTypes.DATEONLY,
        primaryKey: true,
        allowNull: false
      },
      toDate: {
        type: DataTypes.DATEONLY
      }
    }, {
      sequelize
    })
    
    return Salary
  }
}
",
          "name": "Salary.ts",
          "type": "FILE",
        },
      ],
      "name": "models",
      "type": "DIRECTORY",
    },
    Object {
      "content": "node_modules/
dist
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.tmp
",
      "name": ".gitignore",
      "type": "FILE",
    },
    Object {
      "content": "import { Sequelize } from 'sequelize'

const db: Sequelize = new Sequelize({
  dialect: 'postgres',
  database: process.env.POSTGRES_DB_NAME || 'employee_temporal_dataset',
  username: process.env.POSTGRES_DB_USERNAME || 'postgres',
  password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
  host: process.env.POSTGRES_DB_HOST || 'localhost',
  port: parseInt(process.env.POSTGRES_DB_PORT || '5432'),
  define: {
    underscored: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at'
  }
})

export default db
",
      "name": "db.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
  \\"name\\": \\"employee-temporal-dataset\\",
  \\"version\\": \\"0.0.1\\",
  \\"description\\": \\"\\",
  \\"main\\": \\"server.ts\\",
  \\"scripts\\": {
    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\",
    \\"build\\": \\"tsc\\",
    \\"start\\": \\"node ./dist/server.js\\"
  },
  \\"author\\": \\"\\",
  \\"license\\": \\"ISC\\",
  \\"dependencies\\": {
    \\"pg\\": \\"^8.5.1\\",
    \\"pg-hstore\\": \\"^2.3.3\\",
    \\"sequelize\\": \\"^6.3.5\\"
  },
  \\"devDependencies\\": {
    \\"@types/node\\": \\"^14.14.20\\",
    \\"@types/validator\\": \\"^13.1.3\\",
    \\"typescript\\": \\"^4.1.3\\"
  }
}

",
      "name": "package.json",
      "type": "FILE",
    },
    Object {
      "content": "import db from './db'
import { initModels } from './models'

initModels(db)

db.sync({ force: true })
",
      "name": "server.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
    \\"compilerOptions\\": {
      \\"target\\": \\"ES2020\\",
      \\"module\\": \\"commonjs\\",
      \\"lib\\": [\\"ES2020\\"],
      \\"outDir\\": \\"dist\\",
      \\"strict\\": true,
      \\"moduleResolution\\": \\"node\\",
      \\"esModuleInterop\\": true,
      \\"forceConsistentCasingInFileNames\\": true
    }
  }
",
      "name": "tsconfig.json",
      "type": "FILE",
    },
  ],
  "name": "employee-temporal-dataset",
  "type": "DIRECTORY",
}
`;

exports[`Sequelize Framework schema generates correct code for sakila 3`] = `
Object {
  "files": Array [
    Object {
      "files": Array [
        Object {
          "content": "import type { Sequelize, Model } from 'sequelize'
import { Category } from './Category'
import type { CategoryAttributes, CategoryCreationAttributes } from './Category'
import { Post } from './Post'
import type { PostAttributes, PostCreationAttributes } from './Post'
import { PostCategory } from './PostCategory'
import type { PostCategoryAttributes, PostCategoryCreationAttributes } from './PostCategory'
import { PostComment } from './PostComment'
import type { PostCommentAttributes, PostCommentCreationAttributes } from './PostComment'
import { PostMeta } from './PostMeta'
import type { PostMetaAttributes, PostMetaCreationAttributes } from './PostMeta'
import { PostTag } from './PostTag'
import type { PostTagAttributes, PostTagCreationAttributes } from './PostTag'
import { Tag } from './Tag'
import type { TagAttributes, TagCreationAttributes } from './Tag'
import { User } from './User'
import type { UserAttributes, UserCreationAttributes } from './User'

export {
  Category,
  Post,
  PostCategory,
  PostComment,
  PostMeta,
  PostTag,
  Tag,
  User
}

export type {
  CategoryAttributes,
  CategoryCreationAttributes,
  PostAttributes,
  PostCreationAttributes,
  PostCategoryAttributes,
  PostCategoryCreationAttributes,
  PostCommentAttributes,
  PostCommentCreationAttributes,
  PostMetaAttributes,
  PostMetaCreationAttributes,
  PostTagAttributes,
  PostTagCreationAttributes,
  TagAttributes,
  TagCreationAttributes,
  UserAttributes,
  UserCreationAttributes
}

export function initModels(sequelize: Sequelize) {
  Category.initModel(sequelize)
  Post.initModel(sequelize)
  PostCategory.initModel(sequelize)
  PostComment.initModel(sequelize)
  PostMeta.initModel(sequelize)
  PostTag.initModel(sequelize)
  Tag.initModel(sequelize)
  User.initModel(sequelize)

  Category.belongsTo(Category, {
    as: 'parent',
    foreignKey: 'parent_id'
  })
  Category.hasMany(Category, {
    as: 'children',
    foreignKey: 'category_id'
  })
  Category.hasMany(PostCategory, {
    foreignKey: 'category_id'
  })
  Category.belongsToMany(Post, {
    through: PostCategory,
    foreignKey: 'category_id',
    otherKey: 'post_id',
    onDelete: 'CASCADE'
  })
  Post.belongsTo(User, {
    as: 'author',
    foreignKey: 'author_id'
  })
  Post.belongsTo(Post, {
    as: 'parent',
    foreignKey: 'parent_id'
  })
  Post.hasMany(Post, {
    as: 'children',
    foreignKey: 'post_id'
  })
  Post.hasMany(PostCategory, {
    foreignKey: 'post_id'
  })
  Post.belongsToMany(Category, {
    through: PostCategory,
    foreignKey: 'post_id',
    otherKey: 'category_id',
    onDelete: 'CASCADE'
  })
  Post.hasMany(PostComment, {
    as: 'comments',
    foreignKey: 'post_id'
  })
  Post.hasMany(PostMeta, {
    as: 'metas',
    foreignKey: 'post_id'
  })
  Post.hasMany(PostTag, {
    foreignKey: 'post_id'
  })
  Post.belongsToMany(Tag, {
    through: PostTag,
    foreignKey: 'post_id',
    otherKey: 'tag_id',
    onDelete: 'CASCADE'
  })
  PostCategory.belongsTo(Post, {
    foreignKey: 'post_id'
  })
  PostCategory.belongsTo(Category, {
    foreignKey: 'category_id'
  })
  PostComment.belongsTo(Post, {
    foreignKey: 'post_id'
  })
  PostComment.belongsTo(PostComment, {
    as: 'parent',
    foreignKey: 'parent_id'
  })
  PostComment.hasMany(PostComment, {
    as: 'children',
    foreignKey: 'post_comment_id'
  })
  PostMeta.belongsTo(Post, {
    foreignKey: 'post_id'
  })
  PostTag.belongsTo(Post, {
    foreignKey: 'post_id'
  })
  PostTag.belongsTo(Tag, {
    foreignKey: 'tag_id'
  })
  Tag.hasMany(PostTag, {
    foreignKey: 'tag_id'
  })
  Tag.belongsToMany(Post, {
    through: PostTag,
    foreignKey: 'tag_id',
    otherKey: 'post_id',
    onDelete: 'CASCADE'
  })
  User.hasMany(Post, {
    foreignKey: 'user_id'
  })

  return {
    Category,
    Post,
    PostCategory,
    PostComment,
    PostMeta,
    PostTag,
    Tag,
    User
  }
}
",
          "name": "index.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Post, PostId } from './Post'
import type { PostCategory, PostCategoryId } from './PostCategory'

export interface CategoryAttributes {
  id?: number
  title: string
  metaTitle?: string
  slug: string
  content?: string
}

export type CategoryPk = 'id'
export type CategoryId = CategoryAttributes[CategoryPk]
export type CategoryCreationAttributes = Optional<CategoryAttributes, CategoryPk>

export class Category extends Model<CategoryAttributes, CategoryCreationAttributes> implements CategoryAttributes {
  public readonly id?: number
  public title!: string
  public metaTitle?: string
  public slug!: string
  public content?: string

  // Category belongsTo Category (as Parent)
  public readonly parent?: Category
  public getParent!: Sequelize.BelongsToGetAssociationMixin<Category>
  public setParent!: Sequelize.BelongsToSetAssociationMixin<Category, CategoryId>
  public createParent!: Sequelize.BelongsToCreateAssociationMixin<Category>
  
  // Category hasMany Category (as Children)
  public readonly children?: Category[]
  public getChildren!: Sequelize.HasManyGetAssociationsMixin<Category>
  public setChildren!: Sequelize.HasManySetAssociationsMixin<Category, CategoryId>
  public addChild!: Sequelize.HasManyAddAssociationMixin<Category, CategoryId>
  public addChildren!: Sequelize.HasManyAddAssociationsMixin<Category, CategoryId>
  public createChild!: Sequelize.HasManyCreateAssociationMixin<Category>
  public removeChild!: Sequelize.HasManyRemoveAssociationMixin<Category, CategoryId>
  public removeChildren!: Sequelize.HasManyRemoveAssociationsMixin<Category, CategoryId>
  public hasChild!: Sequelize.HasManyHasAssociationMixin<Category, CategoryId>
  public hasChildren!: Sequelize.HasManyHasAssociationsMixin<Category, CategoryId>
  public countChildren!: Sequelize.HasManyCountAssociationsMixin
  
  // Category hasMany PostCategory
  public readonly postCategories?: PostCategory[]
  public getPostCategories!: Sequelize.HasManyGetAssociationsMixin<PostCategory>
  public setPostCategories!: Sequelize.HasManySetAssociationsMixin<PostCategory, PostCategoryId>
  public addPostCategory!: Sequelize.HasManyAddAssociationMixin<PostCategory, PostCategoryId>
  public addPostCategories!: Sequelize.HasManyAddAssociationsMixin<PostCategory, PostCategoryId>
  public createPostCategory!: Sequelize.HasManyCreateAssociationMixin<PostCategory>
  public removePostCategory!: Sequelize.HasManyRemoveAssociationMixin<PostCategory, PostCategoryId>
  public removePostCategories!: Sequelize.HasManyRemoveAssociationsMixin<PostCategory, PostCategoryId>
  public hasPostCategory!: Sequelize.HasManyHasAssociationMixin<PostCategory, PostCategoryId>
  public hasPostCategories!: Sequelize.HasManyHasAssociationsMixin<PostCategory, PostCategoryId>
  public countPostCategories!: Sequelize.HasManyCountAssociationsMixin
  
  // Category belongsToMany Post
  public readonly posts?: Post[]
  public getPosts!: Sequelize.BelongsToManyGetAssociationsMixin<Post>
  public setPosts!: Sequelize.BelongsToManySetAssociationsMixin<Post, PostId>
  public addPost!: Sequelize.BelongsToManyAddAssociationMixin<Post, PostId>
  public addPosts!: Sequelize.BelongsToManyAddAssociationsMixin<Post, PostId>
  public createPost!: Sequelize.BelongsToManyCreateAssociationMixin<Post>
  public removePost!: Sequelize.BelongsToManyRemoveAssociationMixin<Post, PostId>
  public removePosts!: Sequelize.BelongsToManyRemoveAssociationsMixin<Post, PostId>
  public hasPost!: Sequelize.BelongsToManyHasAssociationMixin<Post, PostId>
  public hasPosts!: Sequelize.BelongsToManyHasAssociationsMixin<Post, PostId>
  public countPosts!: Sequelize.BelongsToManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Category {
    Category.init({
      id: {
        type: DataTypes.BIGINT,
        primaryKey: true
      },
      title: {
        type: DataTypes.STRING(75),
        allowNull: false
      },
      metaTitle: {
        type: DataTypes.STRING(100)
      },
      slug: {
        type: DataTypes.STRING(100),
        allowNull: false,
        unique: true
      },
      content: {
        type: DataTypes.TEXT
      }
    }, {
      sequelize
    })
    
    return Category
  }
}
",
          "name": "Category.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Category, CategoryId } from './Category'
import type { PostCategory, PostCategoryId } from './PostCategory'
import type { PostComment, PostCommentId } from './PostComment'
import type { PostMeta, PostMetaId } from './PostMeta'
import type { PostTag, PostTagId } from './PostTag'
import type { Tag, TagId } from './Tag'
import type { User, UserId } from './User'

export interface PostAttributes {
  id?: number
  title: string
  metaTitle?: string
  slug: string
  summary?: string
  published: boolean
  publishedAt?: string
  content?: string
}

export type PostPk = 'id'
export type PostId = PostAttributes[PostPk]
export type PostCreationAttributes = Optional<PostAttributes, PostPk>

export class Post extends Model<PostAttributes, PostCreationAttributes> implements PostAttributes {
  public readonly id?: number
  public title!: string
  public metaTitle?: string
  public slug!: string
  public summary?: string
  public published!: boolean
  public publishedAt?: string
  public content?: string

  // Post belongsTo User (as Author)
  public readonly author?: User
  public getAuthor!: Sequelize.BelongsToGetAssociationMixin<User>
  public setAuthor!: Sequelize.BelongsToSetAssociationMixin<User, UserId>
  public createAuthor!: Sequelize.BelongsToCreateAssociationMixin<User>
  
  // Post belongsTo Post (as Parent)
  public readonly parent?: Post
  public getParent!: Sequelize.BelongsToGetAssociationMixin<Post>
  public setParent!: Sequelize.BelongsToSetAssociationMixin<Post, PostId>
  public createParent!: Sequelize.BelongsToCreateAssociationMixin<Post>
  
  // Post hasMany Post (as Children)
  public readonly children?: Post[]
  public getChildren!: Sequelize.HasManyGetAssociationsMixin<Post>
  public setChildren!: Sequelize.HasManySetAssociationsMixin<Post, PostId>
  public addChild!: Sequelize.HasManyAddAssociationMixin<Post, PostId>
  public addChildren!: Sequelize.HasManyAddAssociationsMixin<Post, PostId>
  public createChild!: Sequelize.HasManyCreateAssociationMixin<Post>
  public removeChild!: Sequelize.HasManyRemoveAssociationMixin<Post, PostId>
  public removeChildren!: Sequelize.HasManyRemoveAssociationsMixin<Post, PostId>
  public hasChild!: Sequelize.HasManyHasAssociationMixin<Post, PostId>
  public hasChildren!: Sequelize.HasManyHasAssociationsMixin<Post, PostId>
  public countChildren!: Sequelize.HasManyCountAssociationsMixin
  
  // Post hasMany PostCategory
  public readonly postCategories?: PostCategory[]
  public getPostCategories!: Sequelize.HasManyGetAssociationsMixin<PostCategory>
  public setPostCategories!: Sequelize.HasManySetAssociationsMixin<PostCategory, PostCategoryId>
  public addPostCategory!: Sequelize.HasManyAddAssociationMixin<PostCategory, PostCategoryId>
  public addPostCategories!: Sequelize.HasManyAddAssociationsMixin<PostCategory, PostCategoryId>
  public createPostCategory!: Sequelize.HasManyCreateAssociationMixin<PostCategory>
  public removePostCategory!: Sequelize.HasManyRemoveAssociationMixin<PostCategory, PostCategoryId>
  public removePostCategories!: Sequelize.HasManyRemoveAssociationsMixin<PostCategory, PostCategoryId>
  public hasPostCategory!: Sequelize.HasManyHasAssociationMixin<PostCategory, PostCategoryId>
  public hasPostCategories!: Sequelize.HasManyHasAssociationsMixin<PostCategory, PostCategoryId>
  public countPostCategories!: Sequelize.HasManyCountAssociationsMixin
  
  // Post belongsToMany Category
  public readonly categories?: Category[]
  public getCategories!: Sequelize.BelongsToManyGetAssociationsMixin<Category>
  public setCategories!: Sequelize.BelongsToManySetAssociationsMixin<Category, CategoryId>
  public addCategory!: Sequelize.BelongsToManyAddAssociationMixin<Category, CategoryId>
  public addCategories!: Sequelize.BelongsToManyAddAssociationsMixin<Category, CategoryId>
  public createCategory!: Sequelize.BelongsToManyCreateAssociationMixin<Category>
  public removeCategory!: Sequelize.BelongsToManyRemoveAssociationMixin<Category, CategoryId>
  public removeCategories!: Sequelize.BelongsToManyRemoveAssociationsMixin<Category, CategoryId>
  public hasCategory!: Sequelize.BelongsToManyHasAssociationMixin<Category, CategoryId>
  public hasCategories!: Sequelize.BelongsToManyHasAssociationsMixin<Category, CategoryId>
  public countCategories!: Sequelize.BelongsToManyCountAssociationsMixin
  
  // Post hasMany PostComment (as Comments)
  public readonly comments?: PostComment[]
  public getComments!: Sequelize.HasManyGetAssociationsMixin<PostComment>
  public setComments!: Sequelize.HasManySetAssociationsMixin<PostComment, PostCommentId>
  public addComment!: Sequelize.HasManyAddAssociationMixin<PostComment, PostCommentId>
  public addComments!: Sequelize.HasManyAddAssociationsMixin<PostComment, PostCommentId>
  public createComment!: Sequelize.HasManyCreateAssociationMixin<PostComment>
  public removeComment!: Sequelize.HasManyRemoveAssociationMixin<PostComment, PostCommentId>
  public removeComments!: Sequelize.HasManyRemoveAssociationsMixin<PostComment, PostCommentId>
  public hasComment!: Sequelize.HasManyHasAssociationMixin<PostComment, PostCommentId>
  public hasComments!: Sequelize.HasManyHasAssociationsMixin<PostComment, PostCommentId>
  public countComments!: Sequelize.HasManyCountAssociationsMixin
  
  // Post hasMany PostMeta (as Meta)
  public readonly metas?: PostMeta[]
  public getMetas!: Sequelize.HasManyGetAssociationsMixin<PostMeta>
  public setMetas!: Sequelize.HasManySetAssociationsMixin<PostMeta, PostMetaId>
  public addMeta!: Sequelize.HasManyAddAssociationMixin<PostMeta, PostMetaId>
  public addMetas!: Sequelize.HasManyAddAssociationsMixin<PostMeta, PostMetaId>
  public createMeta!: Sequelize.HasManyCreateAssociationMixin<PostMeta>
  public removeMeta!: Sequelize.HasManyRemoveAssociationMixin<PostMeta, PostMetaId>
  public removeMetas!: Sequelize.HasManyRemoveAssociationsMixin<PostMeta, PostMetaId>
  public hasMeta!: Sequelize.HasManyHasAssociationMixin<PostMeta, PostMetaId>
  public hasMetas!: Sequelize.HasManyHasAssociationsMixin<PostMeta, PostMetaId>
  public countMetas!: Sequelize.HasManyCountAssociationsMixin
  
  // Post hasMany PostTag
  public readonly postTags?: PostTag[]
  public getPostTags!: Sequelize.HasManyGetAssociationsMixin<PostTag>
  public setPostTags!: Sequelize.HasManySetAssociationsMixin<PostTag, PostTagId>
  public addPostTag!: Sequelize.HasManyAddAssociationMixin<PostTag, PostTagId>
  public addPostTags!: Sequelize.HasManyAddAssociationsMixin<PostTag, PostTagId>
  public createPostTag!: Sequelize.HasManyCreateAssociationMixin<PostTag>
  public removePostTag!: Sequelize.HasManyRemoveAssociationMixin<PostTag, PostTagId>
  public removePostTags!: Sequelize.HasManyRemoveAssociationsMixin<PostTag, PostTagId>
  public hasPostTag!: Sequelize.HasManyHasAssociationMixin<PostTag, PostTagId>
  public hasPostTags!: Sequelize.HasManyHasAssociationsMixin<PostTag, PostTagId>
  public countPostTags!: Sequelize.HasManyCountAssociationsMixin
  
  // Post belongsToMany Tag
  public readonly tags?: Tag[]
  public getTags!: Sequelize.BelongsToManyGetAssociationsMixin<Tag>
  public setTags!: Sequelize.BelongsToManySetAssociationsMixin<Tag, TagId>
  public addTag!: Sequelize.BelongsToManyAddAssociationMixin<Tag, TagId>
  public addTags!: Sequelize.BelongsToManyAddAssociationsMixin<Tag, TagId>
  public createTag!: Sequelize.BelongsToManyCreateAssociationMixin<Tag>
  public removeTag!: Sequelize.BelongsToManyRemoveAssociationMixin<Tag, TagId>
  public removeTags!: Sequelize.BelongsToManyRemoveAssociationsMixin<Tag, TagId>
  public hasTag!: Sequelize.BelongsToManyHasAssociationMixin<Tag, TagId>
  public hasTags!: Sequelize.BelongsToManyHasAssociationsMixin<Tag, TagId>
  public countTags!: Sequelize.BelongsToManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Post {
    Post.init({
      id: {
        type: DataTypes.BIGINT,
        primaryKey: true
      },
      title: {
        type: DataTypes.STRING(75),
        allowNull: false
      },
      metaTitle: {
        type: DataTypes.STRING(100)
      },
      slug: {
        type: DataTypes.STRING(100),
        allowNull: false,
        unique: true
      },
      summary: {
        type: DataTypes.TEXT
      },
      published: {
        type: DataTypes.BOOLEAN,
        allowNull: false
      },
      publishedAt: {
        type: DataTypes.DATE
      },
      content: {
        type: DataTypes.TEXT
      }
    }, {
      sequelize
    })
    
    return Post
  }
}
",
          "name": "Post.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Category, CategoryId } from './Category'
import type { Post, PostId } from './Post'

export interface PostCategoryAttributes {
  postId?: number
  categoryId?: number
}

export type PostCategoryPk = 'postId' | 'categoryId'
export type PostCategoryId = PostCategoryAttributes[PostCategoryPk]
export type PostCategoryCreationAttributes = Optional<PostCategoryAttributes, PostCategoryPk>

export class PostCategory extends Model<PostCategoryAttributes, PostCategoryCreationAttributes> implements PostCategoryAttributes {
  public readonly postId?: number
  public readonly categoryId?: number

  // PostCategory belongsTo Post
  public readonly post?: Post
  public getPost!: Sequelize.BelongsToGetAssociationMixin<Post>
  public setPost!: Sequelize.BelongsToSetAssociationMixin<Post, PostId>
  public createPost!: Sequelize.BelongsToCreateAssociationMixin<Post>
  
  // PostCategory belongsTo Category
  public readonly category?: Category
  public getCategory!: Sequelize.BelongsToGetAssociationMixin<Category>
  public setCategory!: Sequelize.BelongsToSetAssociationMixin<Category, CategoryId>
  public createCategory!: Sequelize.BelongsToCreateAssociationMixin<Category>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof PostCategory {
    PostCategory.init({
      postId: {
        type: DataTypes.BIGINT,
        primaryKey: true
      },
      categoryId: {
        type: DataTypes.BIGINT,
        primaryKey: true
      }
    }, {
      sequelize
    })
    
    return PostCategory
  }
}
",
          "name": "PostCategory.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Post, PostId } from './Post'

export interface PostCommentAttributes {
  id?: number
  title: string
  published: boolean
  publishedAt?: string
  content?: string
}

export type PostCommentPk = 'id'
export type PostCommentId = PostCommentAttributes[PostCommentPk]
export type PostCommentCreationAttributes = Optional<PostCommentAttributes, PostCommentPk>

export class PostComment extends Model<PostCommentAttributes, PostCommentCreationAttributes> implements PostCommentAttributes {
  public readonly id?: number
  public title!: string
  public published!: boolean
  public publishedAt?: string
  public content?: string

  // PostComment belongsTo Post
  public readonly post?: Post
  public getPost!: Sequelize.BelongsToGetAssociationMixin<Post>
  public setPost!: Sequelize.BelongsToSetAssociationMixin<Post, PostId>
  public createPost!: Sequelize.BelongsToCreateAssociationMixin<Post>
  
  // PostComment belongsTo PostComment (as Parent)
  public readonly parent?: PostComment
  public getParent!: Sequelize.BelongsToGetAssociationMixin<PostComment>
  public setParent!: Sequelize.BelongsToSetAssociationMixin<PostComment, PostCommentId>
  public createParent!: Sequelize.BelongsToCreateAssociationMixin<PostComment>
  
  // PostComment hasMany PostComment (as Children)
  public readonly children?: PostComment[]
  public getChildren!: Sequelize.HasManyGetAssociationsMixin<PostComment>
  public setChildren!: Sequelize.HasManySetAssociationsMixin<PostComment, PostCommentId>
  public addChild!: Sequelize.HasManyAddAssociationMixin<PostComment, PostCommentId>
  public addChildren!: Sequelize.HasManyAddAssociationsMixin<PostComment, PostCommentId>
  public createChild!: Sequelize.HasManyCreateAssociationMixin<PostComment>
  public removeChild!: Sequelize.HasManyRemoveAssociationMixin<PostComment, PostCommentId>
  public removeChildren!: Sequelize.HasManyRemoveAssociationsMixin<PostComment, PostCommentId>
  public hasChild!: Sequelize.HasManyHasAssociationMixin<PostComment, PostCommentId>
  public hasChildren!: Sequelize.HasManyHasAssociationsMixin<PostComment, PostCommentId>
  public countChildren!: Sequelize.HasManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof PostComment {
    PostComment.init({
      id: {
        type: DataTypes.BIGINT,
        primaryKey: true
      },
      title: {
        type: DataTypes.STRING(75),
        allowNull: false
      },
      published: {
        type: DataTypes.BOOLEAN,
        allowNull: false
      },
      publishedAt: {
        type: DataTypes.DATE
      },
      content: {
        type: DataTypes.TEXT
      }
    }, {
      sequelize
    })
    
    return PostComment
  }
}
",
          "name": "PostComment.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Post, PostId } from './Post'

export interface PostMetaAttributes {
  id?: number
  key: string
  content?: string
}

export type PostMetaPk = 'id'
export type PostMetaId = PostMetaAttributes[PostMetaPk]
export type PostMetaCreationAttributes = Optional<PostMetaAttributes, PostMetaPk>

export class PostMeta extends Model<PostMetaAttributes, PostMetaCreationAttributes> implements PostMetaAttributes {
  public readonly id?: number
  public key!: string
  public content?: string

  // PostMeta belongsTo Post
  public readonly post?: Post
  public getPost!: Sequelize.BelongsToGetAssociationMixin<Post>
  public setPost!: Sequelize.BelongsToSetAssociationMixin<Post, PostId>
  public createPost!: Sequelize.BelongsToCreateAssociationMixin<Post>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof PostMeta {
    PostMeta.init({
      id: {
        type: DataTypes.BIGINT,
        primaryKey: true
      },
      key: {
        type: DataTypes.STRING(50),
        allowNull: false,
        unique: true
      },
      content: {
        type: DataTypes.TEXT
      }
    }, {
      sequelize
    })
    
    return PostMeta
  }
}
",
          "name": "PostMeta.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Post, PostId } from './Post'
import type { Tag, TagId } from './Tag'

export interface PostTagAttributes {
  postId?: number
  tagId?: number
}

export type PostTagPk = 'postId' | 'tagId'
export type PostTagId = PostTagAttributes[PostTagPk]
export type PostTagCreationAttributes = Optional<PostTagAttributes, PostTagPk>

export class PostTag extends Model<PostTagAttributes, PostTagCreationAttributes> implements PostTagAttributes {
  public readonly postId?: number
  public readonly tagId?: number

  // PostTag belongsTo Post
  public readonly post?: Post
  public getPost!: Sequelize.BelongsToGetAssociationMixin<Post>
  public setPost!: Sequelize.BelongsToSetAssociationMixin<Post, PostId>
  public createPost!: Sequelize.BelongsToCreateAssociationMixin<Post>
  
  // PostTag belongsTo Tag
  public readonly tag?: Tag
  public getTag!: Sequelize.BelongsToGetAssociationMixin<Tag>
  public setTag!: Sequelize.BelongsToSetAssociationMixin<Tag, TagId>
  public createTag!: Sequelize.BelongsToCreateAssociationMixin<Tag>
  
  static initModel(sequelize: Sequelize.Sequelize): typeof PostTag {
    PostTag.init({
      postId: {
        type: DataTypes.BIGINT,
        primaryKey: true
      },
      tagId: {
        type: DataTypes.BIGINT,
        primaryKey: true
      }
    }, {
      sequelize
    })
    
    return PostTag
  }
}
",
          "name": "PostTag.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Post, PostId } from './Post'
import type { PostTag, PostTagId } from './PostTag'

export interface TagAttributes {
  id?: number
  title: string
  metaTitle?: string
  slug: string
  content?: string
}

export type TagPk = 'id'
export type TagId = TagAttributes[TagPk]
export type TagCreationAttributes = Optional<TagAttributes, TagPk>

export class Tag extends Model<TagAttributes, TagCreationAttributes> implements TagAttributes {
  public readonly id?: number
  public title!: string
  public metaTitle?: string
  public slug!: string
  public content?: string

  // Tag hasMany PostTag
  public readonly postTags?: PostTag[]
  public getPostTags!: Sequelize.HasManyGetAssociationsMixin<PostTag>
  public setPostTags!: Sequelize.HasManySetAssociationsMixin<PostTag, PostTagId>
  public addPostTag!: Sequelize.HasManyAddAssociationMixin<PostTag, PostTagId>
  public addPostTags!: Sequelize.HasManyAddAssociationsMixin<PostTag, PostTagId>
  public createPostTag!: Sequelize.HasManyCreateAssociationMixin<PostTag>
  public removePostTag!: Sequelize.HasManyRemoveAssociationMixin<PostTag, PostTagId>
  public removePostTags!: Sequelize.HasManyRemoveAssociationsMixin<PostTag, PostTagId>
  public hasPostTag!: Sequelize.HasManyHasAssociationMixin<PostTag, PostTagId>
  public hasPostTags!: Sequelize.HasManyHasAssociationsMixin<PostTag, PostTagId>
  public countPostTags!: Sequelize.HasManyCountAssociationsMixin
  
  // Tag belongsToMany Post
  public readonly posts?: Post[]
  public getPosts!: Sequelize.BelongsToManyGetAssociationsMixin<Post>
  public setPosts!: Sequelize.BelongsToManySetAssociationsMixin<Post, PostId>
  public addPost!: Sequelize.BelongsToManyAddAssociationMixin<Post, PostId>
  public addPosts!: Sequelize.BelongsToManyAddAssociationsMixin<Post, PostId>
  public createPost!: Sequelize.BelongsToManyCreateAssociationMixin<Post>
  public removePost!: Sequelize.BelongsToManyRemoveAssociationMixin<Post, PostId>
  public removePosts!: Sequelize.BelongsToManyRemoveAssociationsMixin<Post, PostId>
  public hasPost!: Sequelize.BelongsToManyHasAssociationMixin<Post, PostId>
  public hasPosts!: Sequelize.BelongsToManyHasAssociationsMixin<Post, PostId>
  public countPosts!: Sequelize.BelongsToManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof Tag {
    Tag.init({
      id: {
        type: DataTypes.BIGINT,
        primaryKey: true
      },
      title: {
        type: DataTypes.STRING(75),
        allowNull: false
      },
      metaTitle: {
        type: DataTypes.STRING(100)
      },
      slug: {
        type: DataTypes.STRING(100),
        allowNull: false,
        unique: true
      },
      content: {
        type: DataTypes.TEXT
      }
    }, {
      sequelize
    })
    
    return Tag
  }
}
",
          "name": "Tag.ts",
          "type": "FILE",
        },
        Object {
          "content": "import Sequelize, { DataTypes, Model, Optional } from 'sequelize'
import type { Post, PostId } from './Post'

export interface UserAttributes {
  id?: number
  firstName?: string
  middleName?: string
  lastName?: string
  mobile?: string
  email?: string
  passwordHash?: string
  registeredAt?: string
  lastLogin?: string
  intro?: string
  profile?: string
}

export type UserPk = 'id'
export type UserId = UserAttributes[UserPk]
export type UserCreationAttributes = Optional<UserAttributes, UserPk>

export class User extends Model<UserAttributes, UserCreationAttributes> implements UserAttributes {
  public readonly id?: number
  public firstName?: string
  public middleName?: string
  public lastName?: string
  public mobile?: string
  public email?: string
  public passwordHash?: string
  public registeredAt!: string
  public lastLogin?: string
  public intro?: string
  public profile?: string

  // User hasMany Post
  public readonly posts?: Post[]
  public getPosts!: Sequelize.HasManyGetAssociationsMixin<Post>
  public setPosts!: Sequelize.HasManySetAssociationsMixin<Post, PostId>
  public addPost!: Sequelize.HasManyAddAssociationMixin<Post, PostId>
  public addPosts!: Sequelize.HasManyAddAssociationsMixin<Post, PostId>
  public createPost!: Sequelize.HasManyCreateAssociationMixin<Post>
  public removePost!: Sequelize.HasManyRemoveAssociationMixin<Post, PostId>
  public removePosts!: Sequelize.HasManyRemoveAssociationsMixin<Post, PostId>
  public hasPost!: Sequelize.HasManyHasAssociationMixin<Post, PostId>
  public hasPosts!: Sequelize.HasManyHasAssociationsMixin<Post, PostId>
  public countPosts!: Sequelize.HasManyCountAssociationsMixin
  
  static initModel(sequelize: Sequelize.Sequelize): typeof User {
    User.init({
      id: {
        type: DataTypes.BIGINT,
        primaryKey: true
      },
      firstName: {
        type: DataTypes.STRING(50)
      },
      middleName: {
        type: DataTypes.STRING(50)
      },
      lastName: {
        type: DataTypes.STRING(50)
      },
      mobile: {
        type: DataTypes.STRING(15)
      },
      email: {
        type: DataTypes.STRING(50)
      },
      passwordHash: {
        type: DataTypes.STRING(32)
      },
      registeredAt: {
        type: DataTypes.DATE,
        allowNull: false,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP')
      },
      lastLogin: {
        type: DataTypes.DATE
      },
      intro: {
        type: DataTypes.TEXT
      },
      profile: {
        type: DataTypes.TEXT
      }
    }, {
      sequelize
    })
    
    return User
  }
}
",
          "name": "User.ts",
          "type": "FILE",
        },
      ],
      "name": "models",
      "type": "DIRECTORY",
    },
    Object {
      "content": "node_modules/
dist
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.tmp
",
      "name": ".gitignore",
      "type": "FILE",
    },
    Object {
      "content": "import { Sequelize } from 'sequelize'

const db: Sequelize = new Sequelize({
  dialect: 'postgres',
  database: process.env.POSTGRES_DB_NAME || 'blog',
  username: process.env.POSTGRES_DB_USERNAME || 'postgres',
  password: process.env.POSTGRES_DB_PASSWORD || 'postgres',
  host: process.env.POSTGRES_DB_HOST || 'localhost',
  port: parseInt(process.env.POSTGRES_DB_PORT || '5432'),
  define: {
    underscored: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at'
  }
})

export default db
",
      "name": "db.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
  \\"name\\": \\"blog\\",
  \\"version\\": \\"0.0.1\\",
  \\"description\\": \\"\\",
  \\"main\\": \\"server.ts\\",
  \\"scripts\\": {
    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\",
    \\"build\\": \\"tsc\\",
    \\"start\\": \\"node ./dist/server.js\\"
  },
  \\"author\\": \\"\\",
  \\"license\\": \\"ISC\\",
  \\"dependencies\\": {
    \\"pg\\": \\"^8.5.1\\",
    \\"pg-hstore\\": \\"^2.3.3\\",
    \\"sequelize\\": \\"^6.3.5\\"
  },
  \\"devDependencies\\": {
    \\"@types/node\\": \\"^14.14.20\\",
    \\"@types/validator\\": \\"^13.1.3\\",
    \\"typescript\\": \\"^4.1.3\\"
  }
}

",
      "name": "package.json",
      "type": "FILE",
    },
    Object {
      "content": "import db from './db'
import { initModels } from './models'

initModels(db)

db.sync({ force: true })
",
      "name": "server.ts",
      "type": "FILE",
    },
    Object {
      "content": "{
    \\"compilerOptions\\": {
      \\"target\\": \\"ES2020\\",
      \\"module\\": \\"commonjs\\",
      \\"lib\\": [\\"ES2020\\"],
      \\"outDir\\": \\"dist\\",
      \\"strict\\": true,
      \\"moduleResolution\\": \\"node\\",
      \\"esModuleInterop\\": true,
      \\"forceConsistentCasingInFileNames\\": true
    }
  }
",
      "name": "tsconfig.json",
      "type": "FILE",
    },
  ],
  "name": "blog",
  "type": "DIRECTORY",
}
`;
